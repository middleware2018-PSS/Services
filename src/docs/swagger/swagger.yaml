definitions:
  models.Appointment:
    properties:
      location:
        example: Aula Magna
        type: string
      student:
        $ref: '#/definitions/models.Teacher'
        type: object
      time:
        type: string
    type: object
  models.Class:
    properties:
      grade:
        type: integer
      info:
        type: string
      section:
        type: string
      year:
        type: integer
    type: object
  models.Grade:
    properties:
      date:
        type: string
      grade:
        type: integer
      student:
        $ref: '#/definitions/models.Student'
        type: object
      subject:
        example: science
        type: string
      teacher:
        $ref: '#/definitions/models.Teacher'
        type: object
    type: object
  models.List:
    properties:
      data:
        items:
          type: '&{%!s(token.Pos=5631) %!s(*ast.FieldList=&{5640 [] 5641}) %!s(bool=false)}'
        type: array
      next:
        type: string
      previous:
        type: string
      self:
        type: string
    type: object
  models.Login:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Notification:
    properties:
      message:
        type: string
      receiver:
        type: integer
      receiver_kind:
        type: string
      time:
        type: string
    type: object
  models.Parent:
    properties:
      info:
        type: string
      mail:
        type: string
      name:
        type: string
      surname:
        type: string
    type: object
  models.Payment:
    properties:
      amount:
        type: integer
      emitted:
        type: string
      payed:
        type: boolean
      reason:
        type: string
      student:
        $ref: '#/definitions/models.Student'
        type: object
    type: object
  models.Student:
    properties:
      info:
        type: string
      mail:
        type: string
      name:
        type: string
      surname:
        type: string
    type: object
  models.Teacher:
    properties:
      info:
        type: string
      mail:
        type: string
      name:
        type: string
      surname:
        type: string
    type: object
  models.TimeTable:
    properties:
      class:
        $ref: '#/definitions/models.Class'
        type: object
      end:
        type: string
      info:
        type: string
      location:
        example: Aula Magna
        type: string
      start:
        type: string
      subject:
        example: science
        type: string
    type: object
  models.Token:
    properties:
      code:
        type: integer
      expire:
        type: string
      token:
        type: string
    type: object
  models.User:
    properties:
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  repository.Subjects:
    properties:
      subjects:
        example:
        - science
        items:
          type: string
        type: array
    type: object
host: localhost:5000
info:
  contact: {}
  description: These are a School management system's API .
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Back2School API
  version: 1.0byID
paths:
  /accounts:
    post:
      parameters:
      - description: data
        in: body
        name: Account
        required: true
        schema:
          $ref: '#/definitions/models.User'
          type: object
      summary: Create an account
      tags:
      - Accounts
  /accounts/{id}:
    delete:
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      summary: Delete Account
      tags:
      - Accounts
  /appointments:
    get:
      parameters:
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.List'
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get all appointments
      tags:
      - Appointments
    post:
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      - description: data
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/models.Appointment'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Appointment'
            type: object
      summary: Create appointment
      tags:
      - Appointments
  /appointments/{id}:
    delete:
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      summary: Delete Appointment
      tags:
      - Appointments
    get:
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Appointment'
            type: object
      summary: Get a appointment by id
      tags:
      - Appointments
    put:
      parameters:
      - description: Appointment ID
        in: path
        name: id
        required: true
        type: integer
      - description: data
        in: body
        name: appointment
        required: true
        schema:
          $ref: '#/definitions/models.Appointment'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Appointment'
            type: object
      summary: Update appointment's data
      tags:
      - Appointments
  /classes:
    get:
      parameters:
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Class'
            type: array
      summary: Get all classes
      tags:
      - Classes
    post:
      parameters:
      - description: data
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.Class'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Class'
            type: object
      summary: Create class
      tags:
      - Classes
  /classes/{id}:
    delete:
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: integer
      summary: Delete Class
      tags:
      - Classes
    get:
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Class'
            type: object
      summary: Get a class by id
      tags:
      - Classes
    put:
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: integer
      - description: data
        in: body
        name: parent
        required: true
        schema:
          $ref: '#/definitions/models.Class'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Class'
            type: object
      summary: Update Class's data
      tags:
      - Classes
  /classes/{id}/lectures:
    get:
      parameters:
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      - description: Class ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TimeTable'
            type: array
      summary: Get lectures by class
      tags:
      - Classes
  /classes/{id}/students:
    get:
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Student'
            type: array
      summary: Get a student by class
      tags:
      - Classes
  /grades:
    get:
      parameters:
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Grade'
            type: array
      summary: Get all grades
      tags:
      - Grades
    post:
      parameters:
      - description: data
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.Grade'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Grade'
            type: object
      summary: Create grade
      tags:
      - Grades
  /grades/{id}:
    delete:
      parameters:
      - description: Grade ID
        in: path
        name: id
        required: true
        type: integer
      summary: Delete Grade
      tags:
      - Grades
    get:
      parameters:
      - description: Grade ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Grade'
            type: object
      summary: Get a grade by id
      tags:
      - Grades
    put:
      parameters:
      - description: Grade ID
        in: path
        name: id
        required: true
        type: integer
      - description: data
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.Grade'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Grade'
            type: object
      summary: Update Grade
      tags:
      - Grades
  /lectures:
    get:
      parameters:
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TimeTable'
            type: array
      summary: Get all lectures
      tags:
      - Lectures
    post:
      parameters:
      - description: data
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.TimeTable'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Payment'
            type: object
      summary: Create lecture
      tags:
      - Lectures
  /lectures/{id}:
    delete:
      parameters:
      - description: Lecture ID
        in: path
        name: id
        required: true
        type: integer
      summary: Delete Lecture
      tags:
      - Lectures
    get:
      parameters:
      - description: Lecture ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TimeTable'
            type: object
      summary: Get a lecture by id
      tags:
      - Lectures
    put:
      parameters:
      - description: Lecture ID
        in: path
        name: id
        required: true
        type: integer
      - description: data
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.TimeTable'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TimeTable'
            type: object
      summary: Update lecture
      tags:
      - Lectures
  /login:
    post:
      parameters:
      - description: data
        in: body
        name: Account
        required: true
        schema:
          $ref: '#/definitions/models.Login'
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Token'
            type: object
      summary: Authenticate
      tags:
      - Accounts
  /notifications:
    get:
      parameters:
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Notification'
            type: array
      summary: Get all notifications
      tags:
      - Notifications
    post:
      parameters:
      - description: data
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.Notification'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Notification'
            type: object
      summary: Create notification
      tags:
      - Notifications
  /notifications/{id}:
    delete:
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: integer
      summary: Delete Notification
      tags:
      - Notifications
    get:
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Notification'
            type: object
      summary: Get a notification by id
      tags:
      - Notifications
    put:
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: integer
      - description: data
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.Notification'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Notification'
            type: object
      summary: Update notification
      tags:
      - Notifications
  /parents:
    get:
      parameters:
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Parent'
            type: array
      summary: Get all parents
      tags:
      - Parents
    post:
      parameters:
      - description: data
        in: body
        name: parent
        required: true
        schema:
          $ref: '#/definitions/models.Parent'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Parent'
            type: object
      summary: Create parent
      tags:
      - Parents
      - Parents
  /parents/{id}:
    delete:
      parameters:
      - description: Parent ID
        in: path
        name: id
        required: true
        type: integer
      summary: Delete Parent
      tags:
      - Parents
    get:
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Parent'
            type: object
      summary: Get a parent by id
      tags:
      - Parents
    put:
      parameters:
      - description: Parent ID
        in: path
        name: id
        required: true
        type: integer
      - description: data
        in: body
        name: parent
        required: true
        schema:
          $ref: '#/definitions/models.Parent'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Parent'
            type: object
      summary: Update parents's data
      tags:
      - Parents
  /parents/{id}/appointments:
    get:
      parameters:
      - description: Parent ID
        in: path
        name: id
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointment'
            type: array
      summary: Get appointments of the parent
      tags:
      - Parents
      - Parents
  /parents/{id}/notifications:
    get:
      parameters:
      - description: Parent ID
        in: path
        name: id
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Notification'
            type: array
      summary: Get notifications of the parent
      tags:
      - Parents
  /parents/{id}/payments:
    get:
      parameters:
      - description: Parent ID
        in: path
        name: id
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Payment'
            type: array
      summary: Get payments of the parent
      tags:
      - Parents
  /parents/{id}/students:
    get:
      parameters:
      - description: Parent ID
        in: path
        name: id
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Student'
            type: array
      summary: Get children of the parent
      tags:
      - Parents
  /payments:
    get:
      parameters:
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Payment'
            type: array
      summary: Get all payments
      tags:
      - Payments
    post:
      parameters:
      - description: data
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.Payment'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Payment'
            type: object
      summary: Create payment
      tags:
      - Payments
  /payments/{id}:
    delete:
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      summary: Delete Payment
      tags:
      - Payments
    get:
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Payment'
            type: object
      summary: Get a payment by id
      tags:
      - Payments
    put:
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      - description: data
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/models.Payment'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Payment'
            type: object
      summary: Update payment
      tags:
      - Payments
  /students:
    get:
      parameters:
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Student'
            type: array
      summary: Get all students
      tags:
      - Students
    post:
      parameters:
      - description: data
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/models.Student'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Student'
            type: object
      summary: Create student
      tags:
      - Students
  /students/{id}:
    delete:
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: integer
      summary: Delete Student
      tags:
      - Students
    get:
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Student'
            type: object
      summary: Get a student by id
      tags:
      - Students
    put:
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: integer
      - description: data
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/models.Student'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Student'
            type: object
      summary: Update student's data
      tags:
      - Students
  /students/{id}/grades:
    get:
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Grade'
            type: array
      summary: Get grades of the student
      tags:
      - Students
  /teachers:
    get:
      parameters:
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Teacher'
            type: array
      summary: Get all teachers
      tags:
      - Teachers
    post:
      parameters:
      - description: data
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/models.Teacher'
          type: object
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Teacher'
            type: object
      summary: Create teacher
      tags:
      - Teachers
  /teachers/{id}:
    delete:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      summary: Delete Teacher
      tags:
      - Teachers
    get:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Teacher'
            type: object
      summary: Get a teacher by id
      tags:
      - Teachers
    put:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      - description: data
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/models.Teacher'
          type: object
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/models.Teacher'
            type: object
      summary: Update teacher's data
      tags:
      - Teachers
  /teachers/{id}/appointments:
    get:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Appointment'
            type: array
      summary: Get appointments of the teacher
      tags:
      - Teachers
  /teachers/{id}/classes:
    get:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Class'
            type: array
      summary: Get classes in which the teacher teaches
      tags:
      - Teachers
  /teachers/{id}/lectures:
    get:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TimeTable'
            type: array
      summary: Get lectures taught by the teacher
      tags:
      - Teachers
  /teachers/{id}/notifications:
    get:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TimeTable'
            type: array
      summary: Get notifications of the teacher
      tags:
      - Teachers
  /teachers/{id}/subjects:
    get:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repository.Subjects'
            type: object
      summary: Get subject taught by the teacher
      tags:
      - Teachers
  /teachers/{id}/subjects/{subject}:
    get:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      - description: Subject ID
        in: path
        name: subject
        required: true
        type: integer
      - description: number of elements to return
        in: query
        name: limit
        type: integer
      - description: offset in the list of elements to return
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Class'
            type: array
      summary: Get classes in which the subject is taught by the teacher
      tags:
      - Teachers
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
