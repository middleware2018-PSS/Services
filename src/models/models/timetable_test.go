// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTimetables(t *testing.T) {
	t.Parallel()

	query := Timetables(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTimetablesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = timetable.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Timetables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimetablesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Timetables(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Timetables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimetablesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TimetableSlice{timetable}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Timetables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTimetablesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TimetableExists(tx, timetable.ID)
	if err != nil {
		t.Errorf("Unable to check if Timetable exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TimetableExistsG to return true, but got false.")
	}
}
func testTimetablesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	timetableFound, err := FindTimetable(tx, timetable.ID)
	if err != nil {
		t.Error(err)
	}

	if timetableFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTimetablesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Timetables(tx).Bind(timetable); err != nil {
		t.Error(err)
	}
}

func testTimetablesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Timetables(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTimetablesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetableOne := &Timetable{}
	timetableTwo := &Timetable{}
	if err = randomize.Struct(seed, timetableOne, timetableDBTypes, false, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}
	if err = randomize.Struct(seed, timetableTwo, timetableDBTypes, false, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetableOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = timetableTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Timetables(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTimetablesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	timetableOne := &Timetable{}
	timetableTwo := &Timetable{}
	if err = randomize.Struct(seed, timetableOne, timetableDBTypes, false, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}
	if err = randomize.Struct(seed, timetableTwo, timetableDBTypes, false, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetableOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = timetableTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Timetables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func timetableBeforeInsertHook(e boil.Executor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableAfterInsertHook(e boil.Executor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableAfterSelectHook(e boil.Executor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableBeforeUpdateHook(e boil.Executor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableAfterUpdateHook(e boil.Executor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableBeforeDeleteHook(e boil.Executor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableAfterDeleteHook(e boil.Executor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableBeforeUpsertHook(e boil.Executor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func timetableAfterUpsertHook(e boil.Executor, o *Timetable) error {
	*o = Timetable{}
	return nil
}

func testTimetablesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Timetable{}
	o := &Timetable{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, timetableDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Timetable object: %s", err)
	}

	AddTimetableHook(boil.BeforeInsertHook, timetableBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	timetableBeforeInsertHooks = []TimetableHook{}

	AddTimetableHook(boil.AfterInsertHook, timetableAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	timetableAfterInsertHooks = []TimetableHook{}

	AddTimetableHook(boil.AfterSelectHook, timetableAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	timetableAfterSelectHooks = []TimetableHook{}

	AddTimetableHook(boil.BeforeUpdateHook, timetableBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	timetableBeforeUpdateHooks = []TimetableHook{}

	AddTimetableHook(boil.AfterUpdateHook, timetableAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	timetableAfterUpdateHooks = []TimetableHook{}

	AddTimetableHook(boil.BeforeDeleteHook, timetableBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	timetableBeforeDeleteHooks = []TimetableHook{}

	AddTimetableHook(boil.AfterDeleteHook, timetableAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	timetableAfterDeleteHooks = []TimetableHook{}

	AddTimetableHook(boil.BeforeUpsertHook, timetableBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	timetableBeforeUpsertHooks = []TimetableHook{}

	AddTimetableHook(boil.AfterUpsertHook, timetableAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	timetableAfterUpsertHooks = []TimetableHook{}
}
func testTimetablesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Timetables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTimetablesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx, timetableColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Timetables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTimetableToOneClassUsingClass(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Timetable
	var foreign Class

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, timetableDBTypes, false, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, classDBTypes, false, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Class = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Class(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TimetableSlice{&local}
	if err = local.L.LoadClass(tx, false, (*[]*Timetable)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Class == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Class = nil
	if err = local.L.LoadClass(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Class == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTimetableToOneSubjectUsingSubject(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Timetable
	var foreign Subject

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, timetableDBTypes, false, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, subjectDBTypes, false, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Subject = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Subject(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TimetableSlice{&local}
	if err = local.L.LoadSubject(tx, false, (*[]*Timetable)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Subject == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Subject = nil
	if err = local.L.LoadSubject(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Subject == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTimetableToOneSetOpClassUsingClass(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Timetable
	var b, c Class

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, timetableDBTypes, false, strmangle.SetComplement(timetablePrimaryKeyColumns, timetableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Class{&b, &c} {
		err = a.SetClass(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Class != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Timetables[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Class != x.ID {
			t.Error("foreign key was wrong value", a.Class)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Class))
		reflect.Indirect(reflect.ValueOf(&a.Class)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Class != x.ID {
			t.Error("foreign key was wrong value", a.Class, x.ID)
		}
	}
}
func testTimetableToOneSetOpSubjectUsingSubject(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Timetable
	var b, c Subject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, timetableDBTypes, false, strmangle.SetComplement(timetablePrimaryKeyColumns, timetableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, subjectDBTypes, false, strmangle.SetComplement(subjectPrimaryKeyColumns, subjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, subjectDBTypes, false, strmangle.SetComplement(subjectPrimaryKeyColumns, subjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Subject{&b, &c} {
		err = a.SetSubject(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Subject != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Timetables[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Subject != x.ID {
			t.Error("foreign key was wrong value", a.Subject)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Subject))
		reflect.Indirect(reflect.ValueOf(&a.Subject)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Subject != x.ID {
			t.Error("foreign key was wrong value", a.Subject, x.ID)
		}
	}
}
func testTimetablesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = timetable.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTimetablesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TimetableSlice{timetable}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTimetablesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Timetables(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	timetableDBTypes = map[string]string{`Class`: `integer`, `End`: `time without time zone`, `ID`: `integer`, `Info`: `text`, `Location`: `text`, `Start`: `time without time zone`, `Subject`: `text`}
	_                = bytes.MinRead
)

func testTimetablesUpdate(t *testing.T) {
	t.Parallel()

	if len(timetableColumns) == len(timetablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Timetables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	if err = timetable.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTimetablesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(timetableColumns) == len(timetablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	timetable := &Timetable{}
	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Timetables(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, timetable, timetableDBTypes, true, timetablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(timetableColumns, timetablePrimaryKeyColumns) {
		fields = timetableColumns
	} else {
		fields = strmangle.SetComplement(
			timetableColumns,
			timetablePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(timetable))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TimetableSlice{timetable}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTimetablesUpsert(t *testing.T) {
	t.Parallel()

	if len(timetableColumns) == len(timetablePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	timetable := Timetable{}
	if err = randomize.Struct(seed, &timetable, timetableDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = timetable.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Timetable: %s", err)
	}

	count, err := Timetables(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &timetable, timetableDBTypes, false, timetablePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Timetable struct: %s", err)
	}

	if err = timetable.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Timetable: %s", err)
	}

	count, err = Timetables(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
