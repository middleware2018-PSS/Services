// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testClasses(t *testing.T) {
	t.Parallel()

	query := Classes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testClassesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = class.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Classes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClassesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Classes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Classes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClassesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ClassSlice{class}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Classes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testClassesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ClassExists(tx, class.ID)
	if err != nil {
		t.Errorf("Unable to check if Class exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ClassExistsG to return true, but got false.")
	}
}
func testClassesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	classFound, err := FindClass(tx, class.ID)
	if err != nil {
		t.Error(err)
	}

	if classFound == nil {
		t.Error("want a record, got nil")
	}
}
func testClassesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Classes(tx).Bind(class); err != nil {
		t.Error(err)
	}
}

func testClassesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Classes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testClassesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	classOne := &Class{}
	classTwo := &Class{}
	if err = randomize.Struct(seed, classOne, classDBTypes, false, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}
	if err = randomize.Struct(seed, classTwo, classDBTypes, false, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = classOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = classTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Classes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testClassesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	classOne := &Class{}
	classTwo := &Class{}
	if err = randomize.Struct(seed, classOne, classDBTypes, false, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}
	if err = randomize.Struct(seed, classTwo, classDBTypes, false, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = classOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = classTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Classes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func classBeforeInsertHook(e boil.Executor, o *Class) error {
	*o = Class{}
	return nil
}

func classAfterInsertHook(e boil.Executor, o *Class) error {
	*o = Class{}
	return nil
}

func classAfterSelectHook(e boil.Executor, o *Class) error {
	*o = Class{}
	return nil
}

func classBeforeUpdateHook(e boil.Executor, o *Class) error {
	*o = Class{}
	return nil
}

func classAfterUpdateHook(e boil.Executor, o *Class) error {
	*o = Class{}
	return nil
}

func classBeforeDeleteHook(e boil.Executor, o *Class) error {
	*o = Class{}
	return nil
}

func classAfterDeleteHook(e boil.Executor, o *Class) error {
	*o = Class{}
	return nil
}

func classBeforeUpsertHook(e boil.Executor, o *Class) error {
	*o = Class{}
	return nil
}

func classAfterUpsertHook(e boil.Executor, o *Class) error {
	*o = Class{}
	return nil
}

func testClassesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Class{}
	o := &Class{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, classDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Class object: %s", err)
	}

	AddClassHook(boil.BeforeInsertHook, classBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	classBeforeInsertHooks = []ClassHook{}

	AddClassHook(boil.AfterInsertHook, classAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	classAfterInsertHooks = []ClassHook{}

	AddClassHook(boil.AfterSelectHook, classAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	classAfterSelectHooks = []ClassHook{}

	AddClassHook(boil.BeforeUpdateHook, classBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	classBeforeUpdateHooks = []ClassHook{}

	AddClassHook(boil.AfterUpdateHook, classAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	classAfterUpdateHooks = []ClassHook{}

	AddClassHook(boil.BeforeDeleteHook, classBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	classBeforeDeleteHooks = []ClassHook{}

	AddClassHook(boil.AfterDeleteHook, classAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	classAfterDeleteHooks = []ClassHook{}

	AddClassHook(boil.BeforeUpsertHook, classBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	classBeforeUpsertHooks = []ClassHook{}

	AddClassHook(boil.AfterUpsertHook, classAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	classAfterUpsertHooks = []ClassHook{}
}
func testClassesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Classes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClassesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx, classColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Classes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClassToManyStudents(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Class
	var b, c Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, studentDBTypes, false, studentColumnsWithDefault...)
	randomize.Struct(seed, &c, studentDBTypes, false, studentColumnsWithDefault...)

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"back2school\".\"enrolled\" (\"class\", \"student\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"back2school\".\"enrolled\" (\"class\", \"student\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	student, err := a.Students(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range student {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClassSlice{&a}
	if err = a.L.LoadStudents(tx, false, (*[]*Class)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Students); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Students = nil
	if err = a.L.LoadStudents(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Students); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", student)
	}
}

func testClassToManyTeaches(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Class
	var b, c Teach

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, teachDBTypes, false, teachColumnsWithDefault...)
	randomize.Struct(seed, &c, teachDBTypes, false, teachColumnsWithDefault...)

	b.Class = a.ID
	c.Class = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	teach, err := a.Teaches(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range teach {
		if v.Class == b.Class {
			bFound = true
		}
		if v.Class == c.Class {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClassSlice{&a}
	if err = a.L.LoadTeaches(tx, false, (*[]*Class)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Teaches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Teaches = nil
	if err = a.L.LoadTeaches(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Teaches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", teach)
	}
}

func testClassToManyTimetables(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Class
	var b, c Timetable

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, timetableDBTypes, false, timetableColumnsWithDefault...)
	randomize.Struct(seed, &c, timetableDBTypes, false, timetableColumnsWithDefault...)

	b.Class = a.ID
	c.Class = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	timetable, err := a.Timetables(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range timetable {
		if v.Class == b.Class {
			bFound = true
		}
		if v.Class == c.Class {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClassSlice{&a}
	if err = a.L.LoadTimetables(tx, false, (*[]*Class)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Timetables); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Timetables = nil
	if err = a.L.LoadTimetables(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Timetables); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", timetable)
	}
}

func testClassToManyAddOpStudents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Class
	var b, c, d, e Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Student{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Student{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStudents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Classes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Classes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Students[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Students[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Students(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testClassToManySetOpStudents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Class
	var b, c, d, e Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Student{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetStudents(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Students(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetStudents(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Students(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Classes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Classes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Classes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Classes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Students[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Students[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testClassToManyRemoveOpStudents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Class
	var b, c, d, e Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Student{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddStudents(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Students(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveStudents(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Students(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Classes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Classes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Classes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Classes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Students) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Students[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Students[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testClassToManyAddOpTeaches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Class
	var b, c, d, e Teach

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Teach{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teachDBTypes, false, strmangle.SetComplement(teachPrimaryKeyColumns, teachColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Teach{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeaches(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Class {
			t.Error("foreign key was wrong value", a.ID, first.Class)
		}
		if a.ID != second.Class {
			t.Error("foreign key was wrong value", a.ID, second.Class)
		}

		if first.R.Class != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Class != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Teaches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Teaches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Teaches(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testClassToManyAddOpTimetables(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Class
	var b, c, d, e Timetable

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Timetable{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, timetableDBTypes, false, strmangle.SetComplement(timetablePrimaryKeyColumns, timetableColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Timetable{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTimetables(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Class {
			t.Error("foreign key was wrong value", a.ID, first.Class)
		}
		if a.ID != second.Class {
			t.Error("foreign key was wrong value", a.ID, second.Class)
		}

		if first.R.Class != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Class != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Timetables[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Timetables[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Timetables(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testClassesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = class.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testClassesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ClassSlice{class}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testClassesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Classes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	classDBTypes = map[string]string{`Grade`: `integer`, `ID`: `integer`, `Info`: `text`, `Section`: `text`, `Year`: `integer`}
	_            = bytes.MinRead
)

func testClassesUpdate(t *testing.T) {
	t.Parallel()

	if len(classColumns) == len(classPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Classes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	if err = class.Update(tx); err != nil {
		t.Error(err)
	}
}

func testClassesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(classColumns) == len(classPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	class := &Class{}
	if err = randomize.Struct(seed, class, classDBTypes, true, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Classes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, class, classDBTypes, true, classPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(classColumns, classPrimaryKeyColumns) {
		fields = classColumns
	} else {
		fields = strmangle.SetComplement(
			classColumns,
			classPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(class))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ClassSlice{class}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testClassesUpsert(t *testing.T) {
	t.Parallel()

	if len(classColumns) == len(classPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	class := Class{}
	if err = randomize.Struct(seed, &class, classDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = class.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Class: %s", err)
	}

	count, err := Classes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &class, classDBTypes, false, classPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	if err = class.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Class: %s", err)
	}

	count, err = Classes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
