// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTeaches(t *testing.T) {
	t.Parallel()

	query := Teaches(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTeachesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = teach.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Teaches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeachesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Teaches(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Teaches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeachesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TeachSlice{teach}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Teaches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTeachesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TeachExists(tx, teach.Teacher, teach.Subject, teach.Class)
	if err != nil {
		t.Errorf("Unable to check if Teach exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TeachExistsG to return true, but got false.")
	}
}
func testTeachesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	teachFound, err := FindTeach(tx, teach.Teacher, teach.Subject, teach.Class)
	if err != nil {
		t.Error(err)
	}

	if teachFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTeachesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Teaches(tx).Bind(teach); err != nil {
		t.Error(err)
	}
}

func testTeachesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Teaches(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTeachesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teachOne := &Teach{}
	teachTwo := &Teach{}
	if err = randomize.Struct(seed, teachOne, teachDBTypes, false, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}
	if err = randomize.Struct(seed, teachTwo, teachDBTypes, false, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teachOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = teachTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Teaches(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTeachesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	teachOne := &Teach{}
	teachTwo := &Teach{}
	if err = randomize.Struct(seed, teachOne, teachDBTypes, false, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}
	if err = randomize.Struct(seed, teachTwo, teachDBTypes, false, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teachOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = teachTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Teaches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func teachBeforeInsertHook(e boil.Executor, o *Teach) error {
	*o = Teach{}
	return nil
}

func teachAfterInsertHook(e boil.Executor, o *Teach) error {
	*o = Teach{}
	return nil
}

func teachAfterSelectHook(e boil.Executor, o *Teach) error {
	*o = Teach{}
	return nil
}

func teachBeforeUpdateHook(e boil.Executor, o *Teach) error {
	*o = Teach{}
	return nil
}

func teachAfterUpdateHook(e boil.Executor, o *Teach) error {
	*o = Teach{}
	return nil
}

func teachBeforeDeleteHook(e boil.Executor, o *Teach) error {
	*o = Teach{}
	return nil
}

func teachAfterDeleteHook(e boil.Executor, o *Teach) error {
	*o = Teach{}
	return nil
}

func teachBeforeUpsertHook(e boil.Executor, o *Teach) error {
	*o = Teach{}
	return nil
}

func teachAfterUpsertHook(e boil.Executor, o *Teach) error {
	*o = Teach{}
	return nil
}

func testTeachesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Teach{}
	o := &Teach{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, teachDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Teach object: %s", err)
	}

	AddTeachHook(boil.BeforeInsertHook, teachBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	teachBeforeInsertHooks = []TeachHook{}

	AddTeachHook(boil.AfterInsertHook, teachAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	teachAfterInsertHooks = []TeachHook{}

	AddTeachHook(boil.AfterSelectHook, teachAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	teachAfterSelectHooks = []TeachHook{}

	AddTeachHook(boil.BeforeUpdateHook, teachBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	teachBeforeUpdateHooks = []TeachHook{}

	AddTeachHook(boil.AfterUpdateHook, teachAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	teachAfterUpdateHooks = []TeachHook{}

	AddTeachHook(boil.BeforeDeleteHook, teachBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	teachBeforeDeleteHooks = []TeachHook{}

	AddTeachHook(boil.AfterDeleteHook, teachAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	teachAfterDeleteHooks = []TeachHook{}

	AddTeachHook(boil.BeforeUpsertHook, teachBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	teachBeforeUpsertHooks = []TeachHook{}

	AddTeachHook(boil.AfterUpsertHook, teachAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	teachAfterUpsertHooks = []TeachHook{}
}
func testTeachesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Teaches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeachesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx, teachColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Teaches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeachToOneSubjectUsingSubject(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Teach
	var foreign Subject

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teachDBTypes, false, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, subjectDBTypes, false, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Subject = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Subject(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TeachSlice{&local}
	if err = local.L.LoadSubject(tx, false, (*[]*Teach)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Subject == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Subject = nil
	if err = local.L.LoadSubject(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Subject == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTeachToOneTeacherUsingTeacher(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Teach
	var foreign Teacher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teachDBTypes, false, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teacherDBTypes, false, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Teacher = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Teacher(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TeachSlice{&local}
	if err = local.L.LoadTeacher(tx, false, (*[]*Teach)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Teacher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Teacher = nil
	if err = local.L.LoadTeacher(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Teacher == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTeachToOneClassUsingClass(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Teach
	var foreign Class

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teachDBTypes, false, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, classDBTypes, false, classColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Class struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Class = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Class(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TeachSlice{&local}
	if err = local.L.LoadClass(tx, false, (*[]*Teach)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Class == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Class = nil
	if err = local.L.LoadClass(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Class == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTeachToOneSetOpSubjectUsingSubject(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Teach
	var b, c Subject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teachDBTypes, false, strmangle.SetComplement(teachPrimaryKeyColumns, teachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, subjectDBTypes, false, strmangle.SetComplement(subjectPrimaryKeyColumns, subjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, subjectDBTypes, false, strmangle.SetComplement(subjectPrimaryKeyColumns, subjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Subject{&b, &c} {
		err = a.SetSubject(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Subject != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Teaches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Subject != x.ID {
			t.Error("foreign key was wrong value", a.Subject)
		}

		if exists, err := TeachExists(tx, a.Teacher, a.Subject, a.Class); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testTeachToOneSetOpTeacherUsingTeacher(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Teach
	var b, c Teacher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teachDBTypes, false, strmangle.SetComplement(teachPrimaryKeyColumns, teachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teacherDBTypes, false, strmangle.SetComplement(teacherPrimaryKeyColumns, teacherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teacherDBTypes, false, strmangle.SetComplement(teacherPrimaryKeyColumns, teacherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Teacher{&b, &c} {
		err = a.SetTeacher(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Teacher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Teaches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Teacher != x.ID {
			t.Error("foreign key was wrong value", a.Teacher)
		}

		if exists, err := TeachExists(tx, a.Teacher, a.Subject, a.Class); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testTeachToOneSetOpClassUsingClass(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Teach
	var b, c Class

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teachDBTypes, false, strmangle.SetComplement(teachPrimaryKeyColumns, teachColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Class{&b, &c} {
		err = a.SetClass(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Class != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Teaches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Class != x.ID {
			t.Error("foreign key was wrong value", a.Class)
		}

		if exists, err := TeachExists(tx, a.Teacher, a.Subject, a.Class); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testTeachesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = teach.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTeachesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TeachSlice{teach}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTeachesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Teaches(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	teachDBTypes = map[string]string{`Class`: `integer`, `Subject`: `text`, `Teacher`: `integer`}
	_            = bytes.MinRead
)

func testTeachesUpdate(t *testing.T) {
	t.Parallel()

	if len(teachColumns) == len(teachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Teaches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	if err = teach.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTeachesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(teachColumns) == len(teachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	teach := &Teach{}
	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Teaches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, teach, teachDBTypes, true, teachPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(teachColumns, teachPrimaryKeyColumns) {
		fields = teachColumns
	} else {
		fields = strmangle.SetComplement(
			teachColumns,
			teachPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(teach))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TeachSlice{teach}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTeachesUpsert(t *testing.T) {
	t.Parallel()

	if len(teachColumns) == len(teachPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	teach := Teach{}
	if err = randomize.Struct(seed, &teach, teachDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teach.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Teach: %s", err)
	}

	count, err := Teaches(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &teach, teachDBTypes, false, teachPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Teach struct: %s", err)
	}

	if err = teach.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Teach: %s", err)
	}

	count, err = Teaches(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
