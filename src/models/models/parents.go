// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Parent is an object representing the database table.
type Parent struct {
	ID       int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Surname  null.String `boil:"surname" json:"surname,omitempty" toml:"surname" yaml:"surname,omitempty"`
	Mail     null.String `boil:"mail" json:"mail,omitempty" toml:"mail" yaml:"mail,omitempty"`
	Info     null.String `boil:"info" json:"info,omitempty" toml:"info" yaml:"info,omitempty"`
	Password string      `boil:"password" json:"password" toml:"password" yaml:"password"`

	R *parentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L parentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ParentColumns = struct {
	ID       string
	Name     string
	Surname  string
	Mail     string
	Info     string
	Password string
}{
	ID:       "id",
	Name:     "name",
	Surname:  "surname",
	Mail:     "mail",
	Info:     "info",
	Password: "password",
}

// parentR is where relationships are stored.
type parentR struct {
	Students StudentSlice
}

// parentL is where Load methods for each relationship are stored.
type parentL struct{}

var (
	parentColumns               = []string{"id", "name", "surname", "mail", "info", "password"}
	parentColumnsWithoutDefault = []string{}
	parentColumnsWithDefault    = []string{"id", "name", "surname", "mail", "info", "password"}
	parentPrimaryKeyColumns     = []string{"id"}
)

type (
	// ParentSlice is an alias for a slice of pointers to Parent.
	// This should generally be used opposed to []Parent.
	ParentSlice []*Parent
	// ParentHook is the signature for custom Parent hook methods
	ParentHook func(boil.Executor, *Parent) error

	parentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	parentType                 = reflect.TypeOf(&Parent{})
	parentMapping              = queries.MakeStructMapping(parentType)
	parentPrimaryKeyMapping, _ = queries.BindMapping(parentType, parentMapping, parentPrimaryKeyColumns)
	parentInsertCacheMut       sync.RWMutex
	parentInsertCache          = make(map[string]insertCache)
	parentUpdateCacheMut       sync.RWMutex
	parentUpdateCache          = make(map[string]updateCache)
	parentUpsertCacheMut       sync.RWMutex
	parentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var parentBeforeInsertHooks []ParentHook
var parentBeforeUpdateHooks []ParentHook
var parentBeforeDeleteHooks []ParentHook
var parentBeforeUpsertHooks []ParentHook

var parentAfterInsertHooks []ParentHook
var parentAfterSelectHooks []ParentHook
var parentAfterUpdateHooks []ParentHook
var parentAfterDeleteHooks []ParentHook
var parentAfterUpsertHooks []ParentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Parent) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range parentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Parent) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range parentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Parent) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range parentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Parent) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range parentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Parent) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range parentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Parent) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range parentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Parent) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range parentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Parent) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range parentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Parent) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range parentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddParentHook registers your hook function for all future operations.
func AddParentHook(hookPoint boil.HookPoint, parentHook ParentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		parentBeforeInsertHooks = append(parentBeforeInsertHooks, parentHook)
	case boil.BeforeUpdateHook:
		parentBeforeUpdateHooks = append(parentBeforeUpdateHooks, parentHook)
	case boil.BeforeDeleteHook:
		parentBeforeDeleteHooks = append(parentBeforeDeleteHooks, parentHook)
	case boil.BeforeUpsertHook:
		parentBeforeUpsertHooks = append(parentBeforeUpsertHooks, parentHook)
	case boil.AfterInsertHook:
		parentAfterInsertHooks = append(parentAfterInsertHooks, parentHook)
	case boil.AfterSelectHook:
		parentAfterSelectHooks = append(parentAfterSelectHooks, parentHook)
	case boil.AfterUpdateHook:
		parentAfterUpdateHooks = append(parentAfterUpdateHooks, parentHook)
	case boil.AfterDeleteHook:
		parentAfterDeleteHooks = append(parentAfterDeleteHooks, parentHook)
	case boil.AfterUpsertHook:
		parentAfterUpsertHooks = append(parentAfterUpsertHooks, parentHook)
	}
}

// OneP returns a single parent record from the query, and panics on error.
func (q parentQuery) OneP() *Parent {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single parent record from the query.
func (q parentQuery) One() (*Parent, error) {
	o := &Parent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for parents")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Parent records from the query, and panics on error.
func (q parentQuery) AllP() ParentSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Parent records from the query.
func (q parentQuery) All() (ParentSlice, error) {
	var o []*Parent

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Parent slice")
	}

	if len(parentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Parent records in the query, and panics on error.
func (q parentQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Parent records in the query.
func (q parentQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count parents rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q parentQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q parentQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if parents exists")
	}

	return count > 0, nil
}

// StudentsG retrieves all the student's students.
func (o *Parent) StudentsG(mods ...qm.QueryMod) studentQuery {
	return o.Students(boil.GetDB(), mods...)
}

// Students retrieves all the student's students with an executor.
func (o *Parent) Students(exec boil.Executor, mods ...qm.QueryMod) studentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"back2school\".\"isparent\" on \"back2school\".\"students\".\"id\" = \"back2school\".\"isparent\".\"student\""),
		qm.Where("\"back2school\".\"isparent\".\"parent\"=?", o.ID),
	)

	query := Students(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"students\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"back2school\".\"students\".*"})
	}

	return query
}

// LoadStudents allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (parentL) LoadStudents(e boil.Executor, singular bool, maybeParent interface{}) error {
	var slice []*Parent
	var object *Parent

	count := 1
	if singular {
		object = maybeParent.(*Parent)
	} else {
		slice = *maybeParent.(*[]*Parent)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &parentR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &parentR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select \"a\".*, \"b\".\"parent\" from \"back2school\".\"students\" as \"a\" inner join \"back2school\".\"isparent\" as \"b\" on \"a\".\"id\" = \"b\".\"student\" where \"b\".\"parent\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load students")
	}
	defer results.Close()

	var resultSlice []*Student

	var localJoinCols []int
	for results.Next() {
		one := new(Student)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.Surname, &one.Mail, &one.Info, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice students")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice students")
	}

	if len(studentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Students = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Students = append(local.R.Students, foreign)
				break
			}
		}
	}

	return nil
}

// AddStudentsG adds the given related objects to the existing relationships
// of the parent, optionally inserting them as new records.
// Appends related to o.R.Students.
// Sets related.R.Parents appropriately.
// Uses the global database handle.
func (o *Parent) AddStudentsG(insert bool, related ...*Student) error {
	return o.AddStudents(boil.GetDB(), insert, related...)
}

// AddStudentsP adds the given related objects to the existing relationships
// of the parent, optionally inserting them as new records.
// Appends related to o.R.Students.
// Sets related.R.Parents appropriately.
// Panics on error.
func (o *Parent) AddStudentsP(exec boil.Executor, insert bool, related ...*Student) {
	if err := o.AddStudents(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStudentsGP adds the given related objects to the existing relationships
// of the parent, optionally inserting them as new records.
// Appends related to o.R.Students.
// Sets related.R.Parents appropriately.
// Uses the global database handle and panics on error.
func (o *Parent) AddStudentsGP(insert bool, related ...*Student) {
	if err := o.AddStudents(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStudents adds the given related objects to the existing relationships
// of the parent, optionally inserting them as new records.
// Appends related to o.R.Students.
// Sets related.R.Parents appropriately.
func (o *Parent) AddStudents(exec boil.Executor, insert bool, related ...*Student) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"back2school\".\"isparent\" (\"parent\", \"student\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &parentR{
			Students: related,
		}
	} else {
		o.R.Students = append(o.R.Students, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &studentR{
				Parents: ParentSlice{o},
			}
		} else {
			rel.R.Parents = append(rel.R.Parents, o)
		}
	}
	return nil
}

// SetStudentsG removes all previously related items of the
// parent replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parents's Students accordingly.
// Replaces o.R.Students with related.
// Sets related.R.Parents's Students accordingly.
// Uses the global database handle.
func (o *Parent) SetStudentsG(insert bool, related ...*Student) error {
	return o.SetStudents(boil.GetDB(), insert, related...)
}

// SetStudentsP removes all previously related items of the
// parent replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parents's Students accordingly.
// Replaces o.R.Students with related.
// Sets related.R.Parents's Students accordingly.
// Panics on error.
func (o *Parent) SetStudentsP(exec boil.Executor, insert bool, related ...*Student) {
	if err := o.SetStudents(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStudentsGP removes all previously related items of the
// parent replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parents's Students accordingly.
// Replaces o.R.Students with related.
// Sets related.R.Parents's Students accordingly.
// Uses the global database handle and panics on error.
func (o *Parent) SetStudentsGP(insert bool, related ...*Student) {
	if err := o.SetStudents(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStudents removes all previously related items of the
// parent replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parents's Students accordingly.
// Replaces o.R.Students with related.
// Sets related.R.Parents's Students accordingly.
func (o *Parent) SetStudents(exec boil.Executor, insert bool, related ...*Student) error {
	query := "delete from \"back2school\".\"isparent\" where \"parent\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeStudentsFromParentsSlice(o, related)
	if o.R != nil {
		o.R.Students = nil
	}
	return o.AddStudents(exec, insert, related...)
}

// RemoveStudentsG relationships from objects passed in.
// Removes related items from R.Students (uses pointer comparison, removal does not keep order)
// Sets related.R.Parents.
// Uses the global database handle.
func (o *Parent) RemoveStudentsG(related ...*Student) error {
	return o.RemoveStudents(boil.GetDB(), related...)
}

// RemoveStudentsP relationships from objects passed in.
// Removes related items from R.Students (uses pointer comparison, removal does not keep order)
// Sets related.R.Parents.
// Panics on error.
func (o *Parent) RemoveStudentsP(exec boil.Executor, related ...*Student) {
	if err := o.RemoveStudents(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveStudentsGP relationships from objects passed in.
// Removes related items from R.Students (uses pointer comparison, removal does not keep order)
// Sets related.R.Parents.
// Uses the global database handle and panics on error.
func (o *Parent) RemoveStudentsGP(related ...*Student) {
	if err := o.RemoveStudents(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveStudents relationships from objects passed in.
// Removes related items from R.Students (uses pointer comparison, removal does not keep order)
// Sets related.R.Parents.
func (o *Parent) RemoveStudents(exec boil.Executor, related ...*Student) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"back2school\".\"isparent\" where \"parent\" = $1 and \"student\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeStudentsFromParentsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Students {
			if rel != ri {
				continue
			}

			ln := len(o.R.Students)
			if ln > 1 && i < ln-1 {
				o.R.Students[i] = o.R.Students[ln-1]
			}
			o.R.Students = o.R.Students[:ln-1]
			break
		}
	}

	return nil
}

func removeStudentsFromParentsSlice(o *Parent, related []*Student) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Parents {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Parents)
			if ln > 1 && i < ln-1 {
				rel.R.Parents[i] = rel.R.Parents[ln-1]
			}
			rel.R.Parents = rel.R.Parents[:ln-1]
			break
		}
	}
}

// ParentsG retrieves all records.
func ParentsG(mods ...qm.QueryMod) parentQuery {
	return Parents(boil.GetDB(), mods...)
}

// Parents retrieves all the records using an executor.
func Parents(exec boil.Executor, mods ...qm.QueryMod) parentQuery {
	mods = append(mods, qm.From("\"back2school\".\"parents\""))
	return parentQuery{NewQuery(exec, mods...)}
}

// FindParentG retrieves a single record by ID.
func FindParentG(id int, selectCols ...string) (*Parent, error) {
	return FindParent(boil.GetDB(), id, selectCols...)
}

// FindParentGP retrieves a single record by ID, and panics on error.
func FindParentGP(id int, selectCols ...string) *Parent {
	retobj, err := FindParent(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindParent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindParent(exec boil.Executor, id int, selectCols ...string) (*Parent, error) {
	parentObj := &Parent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"back2school\".\"parents\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(parentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from parents")
	}

	return parentObj, nil
}

// FindParentP retrieves a single record by ID with an executor, and panics on error.
func FindParentP(exec boil.Executor, id int, selectCols ...string) *Parent {
	retobj, err := FindParent(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Parent) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Parent) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Parent) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Parent) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no parents provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(parentColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	parentInsertCacheMut.RLock()
	cache, cached := parentInsertCache[key]
	parentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			parentColumns,
			parentColumnsWithDefault,
			parentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(parentType, parentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(parentType, parentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"back2school\".\"parents\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"back2school\".\"parents\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into parents")
	}

	if !cached {
		parentInsertCacheMut.Lock()
		parentInsertCache[key] = cache
		parentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Parent record. See Update for
// whitelist behavior description.
func (o *Parent) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Parent record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Parent) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Parent, and panics on error.
// See Update for whitelist behavior description.
func (o *Parent) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Parent.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Parent) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	parentUpdateCacheMut.RLock()
	cache, cached := parentUpdateCache[key]
	parentUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			parentColumns,
			parentPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update parents, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"back2school\".\"parents\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, parentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(parentType, parentMapping, append(wl, parentPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update parents row")
	}

	if !cached {
		parentUpdateCacheMut.Lock()
		parentUpdateCache[key] = cache
		parentUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q parentQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q parentQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for parents")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ParentSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ParentSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ParentSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ParentSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), parentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"back2school\".\"parents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, parentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in parent slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Parent) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Parent) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Parent) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Parent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no parents provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(parentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	parentUpsertCacheMut.RLock()
	cache, cached := parentUpsertCache[key]
	parentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			parentColumns,
			parentColumnsWithDefault,
			parentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			parentColumns,
			parentPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert parents, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(parentPrimaryKeyColumns))
			copy(conflict, parentPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"back2school\".\"parents\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(parentType, parentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(parentType, parentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert parents")
	}

	if !cached {
		parentUpsertCacheMut.Lock()
		parentUpsertCache[key] = cache
		parentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Parent record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Parent) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Parent record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Parent) DeleteG() error {
	if o == nil {
		return errors.New("models: no Parent provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Parent record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Parent) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Parent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Parent) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Parent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), parentPrimaryKeyMapping)
	sql := "DELETE FROM \"back2school\".\"parents\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from parents")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q parentQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q parentQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no parentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from parents")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ParentSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ParentSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Parent slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ParentSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ParentSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Parent slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(parentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), parentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"back2school\".\"parents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, parentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from parent slice")
	}

	if len(parentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Parent) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Parent) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Parent) ReloadG() error {
	if o == nil {
		return errors.New("models: no Parent provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Parent) Reload(exec boil.Executor) error {
	ret, err := FindParent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ParentSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ParentSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ParentSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ParentSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ParentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	parents := ParentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), parentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"back2school\".\"parents\".* FROM \"back2school\".\"parents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, parentPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&parents)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ParentSlice")
	}

	*o = parents

	return nil
}

// ParentExists checks if the Parent row exists.
func ParentExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"back2school\".\"parents\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if parents exists")
	}

	return exists, nil
}

// ParentExistsG checks if the Parent row exists.
func ParentExistsG(id int) (bool, error) {
	return ParentExists(boil.GetDB(), id)
}

// ParentExistsGP checks if the Parent row exists. Panics on error.
func ParentExistsGP(id int) bool {
	e, err := ParentExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ParentExistsP checks if the Parent row exists. Panics on error.
func ParentExistsP(exec boil.Executor, id int) bool {
	e, err := ParentExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
