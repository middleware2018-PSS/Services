// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testNotifications(t *testing.T) {
	t.Parallel()

	query := Notifications(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testNotificationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = notification.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotificationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Notifications(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotificationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NotificationSlice{notification}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testNotificationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := NotificationExists(tx, notification.ID)
	if err != nil {
		t.Errorf("Unable to check if Notification exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NotificationExistsG to return true, but got false.")
	}
}
func testNotificationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	notificationFound, err := FindNotification(tx, notification.ID)
	if err != nil {
		t.Error(err)
	}

	if notificationFound == nil {
		t.Error("want a record, got nil")
	}
}
func testNotificationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Notifications(tx).Bind(notification); err != nil {
		t.Error(err)
	}
}

func testNotificationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Notifications(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNotificationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notificationOne := &Notification{}
	notificationTwo := &Notification{}
	if err = randomize.Struct(seed, notificationOne, notificationDBTypes, false, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err = randomize.Struct(seed, notificationTwo, notificationDBTypes, false, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notificationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = notificationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Notifications(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNotificationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notificationOne := &Notification{}
	notificationTwo := &Notification{}
	if err = randomize.Struct(seed, notificationOne, notificationDBTypes, false, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err = randomize.Struct(seed, notificationTwo, notificationDBTypes, false, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notificationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = notificationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func notificationBeforeInsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterInsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterSelectHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationBeforeUpdateHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterUpdateHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationBeforeDeleteHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterDeleteHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationBeforeUpsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterUpsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func testNotificationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Notification{}
	o := &Notification{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, notificationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Notification object: %s", err)
	}

	AddNotificationHook(boil.BeforeInsertHook, notificationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	notificationBeforeInsertHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterInsertHook, notificationAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	notificationAfterInsertHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterSelectHook, notificationAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	notificationAfterSelectHooks = []NotificationHook{}

	AddNotificationHook(boil.BeforeUpdateHook, notificationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	notificationBeforeUpdateHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterUpdateHook, notificationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	notificationAfterUpdateHooks = []NotificationHook{}

	AddNotificationHook(boil.BeforeDeleteHook, notificationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	notificationBeforeDeleteHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterDeleteHook, notificationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	notificationAfterDeleteHooks = []NotificationHook{}

	AddNotificationHook(boil.BeforeUpsertHook, notificationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	notificationBeforeUpsertHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterUpsertHook, notificationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	notificationAfterUpsertHooks = []NotificationHook{}
}
func testNotificationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotificationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx, notificationColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotificationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = notification.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testNotificationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NotificationSlice{notification}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testNotificationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Notifications(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	notificationDBTypes = map[string]string{`ID`: `integer`, `Message`: `text`, `Receiver`: `integer`, `ReceiverKind`: `enum.receiver('student','parent','teacher','general')`, `Time`: `time without time zone`}
	_                   = bytes.MinRead
)

func testNotificationsUpdate(t *testing.T) {
	t.Parallel()

	if len(notificationColumns) == len(notificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	if err = notification.Update(tx); err != nil {
		t.Error(err)
	}
}

func testNotificationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(notificationColumns) == len(notificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(notificationColumns, notificationPrimaryKeyColumns) {
		fields = notificationColumns
	} else {
		fields = strmangle.SetComplement(
			notificationColumns,
			notificationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(notification))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := NotificationSlice{notification}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testNotificationsUpsert(t *testing.T) {
	t.Parallel()

	if len(notificationColumns) == len(notificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	notification := Notification{}
	if err = randomize.Struct(seed, &notification, notificationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Notification: %s", err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &notification, notificationDBTypes, false, notificationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	if err = notification.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Notification: %s", err)
	}

	count, err = Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
