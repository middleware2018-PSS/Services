// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testAdmins(t *testing.T) {
	t.Parallel()

	query := Admins(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testAdminsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = admin.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Admins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Admins(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Admins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AdminSlice{admin}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Admins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testAdminsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AdminExists(tx, admin.ID)
	if err != nil {
		t.Errorf("Unable to check if Admin exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AdminExistsG to return true, but got false.")
	}
}
func testAdminsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	adminFound, err := FindAdmin(tx, admin.ID)
	if err != nil {
		t.Error(err)
	}

	if adminFound == nil {
		t.Error("want a record, got nil")
	}
}
func testAdminsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Admins(tx).Bind(admin); err != nil {
		t.Error(err)
	}
}

func testAdminsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Admins(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAdminsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	adminOne := &Admin{}
	adminTwo := &Admin{}
	if err = randomize.Struct(seed, adminOne, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}
	if err = randomize.Struct(seed, adminTwo, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = adminOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = adminTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Admins(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAdminsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	adminOne := &Admin{}
	adminTwo := &Admin{}
	if err = randomize.Struct(seed, adminOne, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}
	if err = randomize.Struct(seed, adminTwo, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = adminOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = adminTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Admins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func adminBeforeInsertHook(e boil.Executor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminAfterInsertHook(e boil.Executor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminAfterSelectHook(e boil.Executor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminBeforeUpdateHook(e boil.Executor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminAfterUpdateHook(e boil.Executor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminBeforeDeleteHook(e boil.Executor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminAfterDeleteHook(e boil.Executor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminBeforeUpsertHook(e boil.Executor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminAfterUpsertHook(e boil.Executor, o *Admin) error {
	*o = Admin{}
	return nil
}

func testAdminsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Admin{}
	o := &Admin{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, adminDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Admin object: %s", err)
	}

	AddAdminHook(boil.BeforeInsertHook, adminBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	adminBeforeInsertHooks = []AdminHook{}

	AddAdminHook(boil.AfterInsertHook, adminAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	adminAfterInsertHooks = []AdminHook{}

	AddAdminHook(boil.AfterSelectHook, adminAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	adminAfterSelectHooks = []AdminHook{}

	AddAdminHook(boil.BeforeUpdateHook, adminBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	adminBeforeUpdateHooks = []AdminHook{}

	AddAdminHook(boil.AfterUpdateHook, adminAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	adminAfterUpdateHooks = []AdminHook{}

	AddAdminHook(boil.BeforeDeleteHook, adminBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	adminBeforeDeleteHooks = []AdminHook{}

	AddAdminHook(boil.AfterDeleteHook, adminAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	adminAfterDeleteHooks = []AdminHook{}

	AddAdminHook(boil.BeforeUpsertHook, adminBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	adminBeforeUpsertHooks = []AdminHook{}

	AddAdminHook(boil.AfterUpsertHook, adminAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	adminAfterUpsertHooks = []AdminHook{}
}
func testAdminsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Admins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdminsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx, adminColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Admins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdminsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = admin.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAdminsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AdminSlice{admin}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testAdminsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Admins(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	adminDBTypes = map[string]string{`ID`: `integer`, `Info`: `text`, `Name`: `text`, `Password`: `text`, `Surname`: `text`}
	_            = bytes.MinRead
)

func testAdminsUpdate(t *testing.T) {
	t.Parallel()

	if len(adminColumns) == len(adminPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Admins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	if err = admin.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAdminsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(adminColumns) == len(adminPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	admin := &Admin{}
	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Admins(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, admin, adminDBTypes, true, adminPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(adminColumns, adminPrimaryKeyColumns) {
		fields = adminColumns
	} else {
		fields = strmangle.SetComplement(
			adminColumns,
			adminPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(admin))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AdminSlice{admin}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testAdminsUpsert(t *testing.T) {
	t.Parallel()

	if len(adminColumns) == len(adminPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	admin := Admin{}
	if err = randomize.Struct(seed, &admin, adminDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = admin.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Admin: %s", err)
	}

	count, err := Admins(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &admin, adminDBTypes, false, adminPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	if err = admin.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Admin: %s", err)
	}

	count, err = Admins(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
