// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Appointment is an object representing the database table.
type Appointment struct {
	Student  int         `boil:"student" json:"student" toml:"student" yaml:"student"`
	Teacher  int         `boil:"teacher" json:"teacher" toml:"teacher" yaml:"teacher"`
	Location null.String `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
	Time     time.Time   `boil:"time" json:"time" toml:"time" yaml:"time"`
	ID       int         `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *appointmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L appointmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AppointmentColumns = struct {
	Student  string
	Teacher  string
	Location string
	Time     string
	ID       string
}{
	Student:  "student",
	Teacher:  "teacher",
	Location: "location",
	Time:     "time",
	ID:       "id",
}

// appointmentR is where relationships are stored.
type appointmentR struct {
	Student *Student
	Teacher *Teacher
}

// appointmentL is where Load methods for each relationship are stored.
type appointmentL struct{}

var (
	appointmentColumns               = []string{"student", "teacher", "location", "time", "id"}
	appointmentColumnsWithoutDefault = []string{"student", "teacher", "time"}
	appointmentColumnsWithDefault    = []string{"location", "id"}
	appointmentPrimaryKeyColumns     = []string{"id"}
)

type (
	// AppointmentSlice is an alias for a slice of pointers to Appointment.
	// This should generally be used opposed to []Appointment.
	AppointmentSlice []*Appointment
	// AppointmentHook is the signature for custom Appointment hook methods
	AppointmentHook func(boil.Executor, *Appointment) error

	appointmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	appointmentType                 = reflect.TypeOf(&Appointment{})
	appointmentMapping              = queries.MakeStructMapping(appointmentType)
	appointmentPrimaryKeyMapping, _ = queries.BindMapping(appointmentType, appointmentMapping, appointmentPrimaryKeyColumns)
	appointmentInsertCacheMut       sync.RWMutex
	appointmentInsertCache          = make(map[string]insertCache)
	appointmentUpdateCacheMut       sync.RWMutex
	appointmentUpdateCache          = make(map[string]updateCache)
	appointmentUpsertCacheMut       sync.RWMutex
	appointmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var appointmentBeforeInsertHooks []AppointmentHook
var appointmentBeforeUpdateHooks []AppointmentHook
var appointmentBeforeDeleteHooks []AppointmentHook
var appointmentBeforeUpsertHooks []AppointmentHook

var appointmentAfterInsertHooks []AppointmentHook
var appointmentAfterSelectHooks []AppointmentHook
var appointmentAfterUpdateHooks []AppointmentHook
var appointmentAfterDeleteHooks []AppointmentHook
var appointmentAfterUpsertHooks []AppointmentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Appointment) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range appointmentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Appointment) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range appointmentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Appointment) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range appointmentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Appointment) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range appointmentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Appointment) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range appointmentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Appointment) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range appointmentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Appointment) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range appointmentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Appointment) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range appointmentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Appointment) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range appointmentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAppointmentHook registers your hook function for all future operations.
func AddAppointmentHook(hookPoint boil.HookPoint, appointmentHook AppointmentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		appointmentBeforeInsertHooks = append(appointmentBeforeInsertHooks, appointmentHook)
	case boil.BeforeUpdateHook:
		appointmentBeforeUpdateHooks = append(appointmentBeforeUpdateHooks, appointmentHook)
	case boil.BeforeDeleteHook:
		appointmentBeforeDeleteHooks = append(appointmentBeforeDeleteHooks, appointmentHook)
	case boil.BeforeUpsertHook:
		appointmentBeforeUpsertHooks = append(appointmentBeforeUpsertHooks, appointmentHook)
	case boil.AfterInsertHook:
		appointmentAfterInsertHooks = append(appointmentAfterInsertHooks, appointmentHook)
	case boil.AfterSelectHook:
		appointmentAfterSelectHooks = append(appointmentAfterSelectHooks, appointmentHook)
	case boil.AfterUpdateHook:
		appointmentAfterUpdateHooks = append(appointmentAfterUpdateHooks, appointmentHook)
	case boil.AfterDeleteHook:
		appointmentAfterDeleteHooks = append(appointmentAfterDeleteHooks, appointmentHook)
	case boil.AfterUpsertHook:
		appointmentAfterUpsertHooks = append(appointmentAfterUpsertHooks, appointmentHook)
	}
}

// OneP returns a single appointment record from the query, and panics on error.
func (q appointmentQuery) OneP() *Appointment {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single appointment record from the query.
func (q appointmentQuery) One() (*Appointment, error) {
	o := &Appointment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for appointments")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Appointment records from the query, and panics on error.
func (q appointmentQuery) AllP() AppointmentSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Appointment records from the query.
func (q appointmentQuery) All() (AppointmentSlice, error) {
	var o []*Appointment

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Appointment slice")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Appointment records in the query, and panics on error.
func (q appointmentQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Appointment records in the query.
func (q appointmentQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count appointments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q appointmentQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q appointmentQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if appointments exists")
	}

	return count > 0, nil
}

// StudentG pointed to by the foreign key.
func (o *Appointment) StudentG(mods ...qm.QueryMod) studentQuery {
	return o.Student(boil.GetDB(), mods...)
}

// Student pointed to by the foreign key.
func (o *Appointment) Student(exec boil.Executor, mods ...qm.QueryMod) studentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Student),
	}

	queryMods = append(queryMods, mods...)

	query := Students(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"students\"")

	return query
}

// TeacherG pointed to by the foreign key.
func (o *Appointment) TeacherG(mods ...qm.QueryMod) teacherQuery {
	return o.Teacher(boil.GetDB(), mods...)
}

// Teacher pointed to by the foreign key.
func (o *Appointment) Teacher(exec boil.Executor, mods ...qm.QueryMod) teacherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Teacher),
	}

	queryMods = append(queryMods, mods...)

	query := Teachers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"teachers\"")

	return query
} // LoadStudent allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (appointmentL) LoadStudent(e boil.Executor, singular bool, maybeAppointment interface{}) error {
	var slice []*Appointment
	var object *Appointment

	count := 1
	if singular {
		object = maybeAppointment.(*Appointment)
	} else {
		slice = *maybeAppointment.(*[]*Appointment)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &appointmentR{}
		}
		args[0] = object.Student
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &appointmentR{}
			}
			args[i] = obj.Student
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"students\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Student")
	}
	defer results.Close()

	var resultSlice []*Student
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Student")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Student = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Student == foreign.ID {
				local.R.Student = foreign
				break
			}
		}
	}

	return nil
}

// LoadTeacher allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (appointmentL) LoadTeacher(e boil.Executor, singular bool, maybeAppointment interface{}) error {
	var slice []*Appointment
	var object *Appointment

	count := 1
	if singular {
		object = maybeAppointment.(*Appointment)
	} else {
		slice = *maybeAppointment.(*[]*Appointment)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &appointmentR{}
		}
		args[0] = object.Teacher
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &appointmentR{}
			}
			args[i] = obj.Teacher
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"teachers\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Teacher")
	}
	defer results.Close()

	var resultSlice []*Teacher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Teacher")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Teacher = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Teacher == foreign.ID {
				local.R.Teacher = foreign
				break
			}
		}
	}

	return nil
}

// SetStudentG of the appointment to the related item.
// Sets o.R.Student to related.
// Adds o to related.R.Appointments.
// Uses the global database handle.
func (o *Appointment) SetStudentG(insert bool, related *Student) error {
	return o.SetStudent(boil.GetDB(), insert, related)
}

// SetStudentP of the appointment to the related item.
// Sets o.R.Student to related.
// Adds o to related.R.Appointments.
// Panics on error.
func (o *Appointment) SetStudentP(exec boil.Executor, insert bool, related *Student) {
	if err := o.SetStudent(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStudentGP of the appointment to the related item.
// Sets o.R.Student to related.
// Adds o to related.R.Appointments.
// Uses the global database handle and panics on error.
func (o *Appointment) SetStudentGP(insert bool, related *Student) {
	if err := o.SetStudent(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStudent of the appointment to the related item.
// Sets o.R.Student to related.
// Adds o to related.R.Appointments.
func (o *Appointment) SetStudent(exec boil.Executor, insert bool, related *Student) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"back2school\".\"appointments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"student"}),
		strmangle.WhereClause("\"", "\"", 2, appointmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Student = related.ID

	if o.R == nil {
		o.R = &appointmentR{
			Student: related,
		}
	} else {
		o.R.Student = related
	}

	if related.R == nil {
		related.R = &studentR{
			Appointments: AppointmentSlice{o},
		}
	} else {
		related.R.Appointments = append(related.R.Appointments, o)
	}

	return nil
}

// SetTeacherG of the appointment to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Appointments.
// Uses the global database handle.
func (o *Appointment) SetTeacherG(insert bool, related *Teacher) error {
	return o.SetTeacher(boil.GetDB(), insert, related)
}

// SetTeacherP of the appointment to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Appointments.
// Panics on error.
func (o *Appointment) SetTeacherP(exec boil.Executor, insert bool, related *Teacher) {
	if err := o.SetTeacher(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTeacherGP of the appointment to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Appointments.
// Uses the global database handle and panics on error.
func (o *Appointment) SetTeacherGP(insert bool, related *Teacher) {
	if err := o.SetTeacher(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTeacher of the appointment to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Appointments.
func (o *Appointment) SetTeacher(exec boil.Executor, insert bool, related *Teacher) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"back2school\".\"appointments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"teacher"}),
		strmangle.WhereClause("\"", "\"", 2, appointmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Teacher = related.ID

	if o.R == nil {
		o.R = &appointmentR{
			Teacher: related,
		}
	} else {
		o.R.Teacher = related
	}

	if related.R == nil {
		related.R = &teacherR{
			Appointments: AppointmentSlice{o},
		}
	} else {
		related.R.Appointments = append(related.R.Appointments, o)
	}

	return nil
}

// AppointmentsG retrieves all records.
func AppointmentsG(mods ...qm.QueryMod) appointmentQuery {
	return Appointments(boil.GetDB(), mods...)
}

// Appointments retrieves all the records using an executor.
func Appointments(exec boil.Executor, mods ...qm.QueryMod) appointmentQuery {
	mods = append(mods, qm.From("\"back2school\".\"appointments\""))
	return appointmentQuery{NewQuery(exec, mods...)}
}

// FindAppointmentG retrieves a single record by ID.
func FindAppointmentG(id int, selectCols ...string) (*Appointment, error) {
	return FindAppointment(boil.GetDB(), id, selectCols...)
}

// FindAppointmentGP retrieves a single record by ID, and panics on error.
func FindAppointmentGP(id int, selectCols ...string) *Appointment {
	retobj, err := FindAppointment(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAppointment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAppointment(exec boil.Executor, id int, selectCols ...string) (*Appointment, error) {
	appointmentObj := &Appointment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"back2school\".\"appointments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(appointmentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from appointments")
	}

	return appointmentObj, nil
}

// FindAppointmentP retrieves a single record by ID with an executor, and panics on error.
func FindAppointmentP(exec boil.Executor, id int, selectCols ...string) *Appointment {
	retobj, err := FindAppointment(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Appointment) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Appointment) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Appointment) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Appointment) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no appointments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(appointmentColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	appointmentInsertCacheMut.RLock()
	cache, cached := appointmentInsertCache[key]
	appointmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			appointmentColumns,
			appointmentColumnsWithDefault,
			appointmentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(appointmentType, appointmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(appointmentType, appointmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"back2school\".\"appointments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"back2school\".\"appointments\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into appointments")
	}

	if !cached {
		appointmentInsertCacheMut.Lock()
		appointmentInsertCache[key] = cache
		appointmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Appointment record. See Update for
// whitelist behavior description.
func (o *Appointment) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Appointment record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Appointment) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Appointment, and panics on error.
// See Update for whitelist behavior description.
func (o *Appointment) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Appointment.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Appointment) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	appointmentUpdateCacheMut.RLock()
	cache, cached := appointmentUpdateCache[key]
	appointmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			appointmentColumns,
			appointmentPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update appointments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"back2school\".\"appointments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, appointmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(appointmentType, appointmentMapping, append(wl, appointmentPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update appointments row")
	}

	if !cached {
		appointmentUpdateCacheMut.Lock()
		appointmentUpdateCache[key] = cache
		appointmentUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q appointmentQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q appointmentQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for appointments")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AppointmentSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AppointmentSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AppointmentSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AppointmentSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appointmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"back2school\".\"appointments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, appointmentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in appointment slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Appointment) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Appointment) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Appointment) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Appointment) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no appointments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(appointmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	appointmentUpsertCacheMut.RLock()
	cache, cached := appointmentUpsertCache[key]
	appointmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			appointmentColumns,
			appointmentColumnsWithDefault,
			appointmentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			appointmentColumns,
			appointmentPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert appointments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(appointmentPrimaryKeyColumns))
			copy(conflict, appointmentPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"back2school\".\"appointments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(appointmentType, appointmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(appointmentType, appointmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert appointments")
	}

	if !cached {
		appointmentUpsertCacheMut.Lock()
		appointmentUpsertCache[key] = cache
		appointmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Appointment record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Appointment) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Appointment record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Appointment) DeleteG() error {
	if o == nil {
		return errors.New("models: no Appointment provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Appointment record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Appointment) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Appointment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Appointment) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Appointment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), appointmentPrimaryKeyMapping)
	sql := "DELETE FROM \"back2school\".\"appointments\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from appointments")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q appointmentQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q appointmentQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no appointmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from appointments")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AppointmentSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o AppointmentSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Appointment slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AppointmentSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AppointmentSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Appointment slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(appointmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appointmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"back2school\".\"appointments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appointmentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from appointment slice")
	}

	if len(appointmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Appointment) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Appointment) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Appointment) ReloadG() error {
	if o == nil {
		return errors.New("models: no Appointment provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Appointment) Reload(exec boil.Executor) error {
	ret, err := FindAppointment(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AppointmentSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AppointmentSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AppointmentSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty AppointmentSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AppointmentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	appointments := AppointmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appointmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"back2school\".\"appointments\".* FROM \"back2school\".\"appointments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appointmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&appointments)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AppointmentSlice")
	}

	*o = appointments

	return nil
}

// AppointmentExists checks if the Appointment row exists.
func AppointmentExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"back2school\".\"appointments\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if appointments exists")
	}

	return exists, nil
}

// AppointmentExistsG checks if the Appointment row exists.
func AppointmentExistsG(id int) (bool, error) {
	return AppointmentExists(boil.GetDB(), id)
}

// AppointmentExistsGP checks if the Appointment row exists. Panics on error.
func AppointmentExistsGP(id int) bool {
	e, err := AppointmentExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AppointmentExistsP checks if the Appointment row exists. Panics on error.
func AppointmentExistsP(exec boil.Executor, id int) bool {
	e, err := AppointmentExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
