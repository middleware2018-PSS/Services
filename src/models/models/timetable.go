// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Timetable is an object representing the database table.
type Timetable struct {
	Class    int         `boil:"class" json:"class" toml:"class" yaml:"class"`
	Subject  string      `boil:"subject" json:"subject" toml:"subject" yaml:"subject"`
	Location null.String `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
	Start    null.Time   `boil:"start" json:"start,omitempty" toml:"start" yaml:"start,omitempty"`
	End      null.Time   `boil:"end" json:"end,omitempty" toml:"end" yaml:"end,omitempty"`
	Info     null.String `boil:"info" json:"info,omitempty" toml:"info" yaml:"info,omitempty"`
	ID       int         `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *timetableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L timetableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TimetableColumns = struct {
	Class    string
	Subject  string
	Location string
	Start    string
	End      string
	Info     string
	ID       string
}{
	Class:    "class",
	Subject:  "subject",
	Location: "location",
	Start:    "start",
	End:      "end",
	Info:     "info",
	ID:       "id",
}

// timetableR is where relationships are stored.
type timetableR struct {
	Class   *Class
	Subject *Subject
}

// timetableL is where Load methods for each relationship are stored.
type timetableL struct{}

var (
	timetableColumns               = []string{"class", "subject", "location", "start", "end", "info", "id"}
	timetableColumnsWithoutDefault = []string{"class", "start", "end"}
	timetableColumnsWithDefault    = []string{"subject", "location", "info", "id"}
	timetablePrimaryKeyColumns     = []string{"id"}
)

type (
	// TimetableSlice is an alias for a slice of pointers to Timetable.
	// This should generally be used opposed to []Timetable.
	TimetableSlice []*Timetable
	// TimetableHook is the signature for custom Timetable hook methods
	TimetableHook func(boil.Executor, *Timetable) error

	timetableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	timetableType                 = reflect.TypeOf(&Timetable{})
	timetableMapping              = queries.MakeStructMapping(timetableType)
	timetablePrimaryKeyMapping, _ = queries.BindMapping(timetableType, timetableMapping, timetablePrimaryKeyColumns)
	timetableInsertCacheMut       sync.RWMutex
	timetableInsertCache          = make(map[string]insertCache)
	timetableUpdateCacheMut       sync.RWMutex
	timetableUpdateCache          = make(map[string]updateCache)
	timetableUpsertCacheMut       sync.RWMutex
	timetableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var timetableBeforeInsertHooks []TimetableHook
var timetableBeforeUpdateHooks []TimetableHook
var timetableBeforeDeleteHooks []TimetableHook
var timetableBeforeUpsertHooks []TimetableHook

var timetableAfterInsertHooks []TimetableHook
var timetableAfterSelectHooks []TimetableHook
var timetableAfterUpdateHooks []TimetableHook
var timetableAfterDeleteHooks []TimetableHook
var timetableAfterUpsertHooks []TimetableHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Timetable) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range timetableBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Timetable) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range timetableBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Timetable) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range timetableBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Timetable) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range timetableBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Timetable) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range timetableAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Timetable) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range timetableAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Timetable) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range timetableAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Timetable) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range timetableAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Timetable) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range timetableAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTimetableHook registers your hook function for all future operations.
func AddTimetableHook(hookPoint boil.HookPoint, timetableHook TimetableHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		timetableBeforeInsertHooks = append(timetableBeforeInsertHooks, timetableHook)
	case boil.BeforeUpdateHook:
		timetableBeforeUpdateHooks = append(timetableBeforeUpdateHooks, timetableHook)
	case boil.BeforeDeleteHook:
		timetableBeforeDeleteHooks = append(timetableBeforeDeleteHooks, timetableHook)
	case boil.BeforeUpsertHook:
		timetableBeforeUpsertHooks = append(timetableBeforeUpsertHooks, timetableHook)
	case boil.AfterInsertHook:
		timetableAfterInsertHooks = append(timetableAfterInsertHooks, timetableHook)
	case boil.AfterSelectHook:
		timetableAfterSelectHooks = append(timetableAfterSelectHooks, timetableHook)
	case boil.AfterUpdateHook:
		timetableAfterUpdateHooks = append(timetableAfterUpdateHooks, timetableHook)
	case boil.AfterDeleteHook:
		timetableAfterDeleteHooks = append(timetableAfterDeleteHooks, timetableHook)
	case boil.AfterUpsertHook:
		timetableAfterUpsertHooks = append(timetableAfterUpsertHooks, timetableHook)
	}
}

// OneP returns a single timetable record from the query, and panics on error.
func (q timetableQuery) OneP() *Timetable {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single timetable record from the query.
func (q timetableQuery) One() (*Timetable, error) {
	o := &Timetable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for timetable")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Timetable records from the query, and panics on error.
func (q timetableQuery) AllP() TimetableSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Timetable records from the query.
func (q timetableQuery) All() (TimetableSlice, error) {
	var o []*Timetable

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Timetable slice")
	}

	if len(timetableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Timetable records in the query, and panics on error.
func (q timetableQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Timetable records in the query.
func (q timetableQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count timetable rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q timetableQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q timetableQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if timetable exists")
	}

	return count > 0, nil
}

// ClassG pointed to by the foreign key.
func (o *Timetable) ClassG(mods ...qm.QueryMod) classQuery {
	return o.Class(boil.GetDB(), mods...)
}

// Class pointed to by the foreign key.
func (o *Timetable) Class(exec boil.Executor, mods ...qm.QueryMod) classQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Class),
	}

	queryMods = append(queryMods, mods...)

	query := Classes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"classes\"")

	return query
}

// SubjectG pointed to by the foreign key.
func (o *Timetable) SubjectG(mods ...qm.QueryMod) subjectQuery {
	return o.Subject(boil.GetDB(), mods...)
}

// Subject pointed to by the foreign key.
func (o *Timetable) Subject(exec boil.Executor, mods ...qm.QueryMod) subjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Subject),
	}

	queryMods = append(queryMods, mods...)

	query := Subjects(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"subjects\"")

	return query
} // LoadClass allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (timetableL) LoadClass(e boil.Executor, singular bool, maybeTimetable interface{}) error {
	var slice []*Timetable
	var object *Timetable

	count := 1
	if singular {
		object = maybeTimetable.(*Timetable)
	} else {
		slice = *maybeTimetable.(*[]*Timetable)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &timetableR{}
		}
		args[0] = object.Class
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &timetableR{}
			}
			args[i] = obj.Class
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"classes\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Class")
	}
	defer results.Close()

	var resultSlice []*Class
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Class")
	}

	if len(timetableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Class = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Class == foreign.ID {
				local.R.Class = foreign
				break
			}
		}
	}

	return nil
}

// LoadSubject allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (timetableL) LoadSubject(e boil.Executor, singular bool, maybeTimetable interface{}) error {
	var slice []*Timetable
	var object *Timetable

	count := 1
	if singular {
		object = maybeTimetable.(*Timetable)
	} else {
		slice = *maybeTimetable.(*[]*Timetable)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &timetableR{}
		}
		args[0] = object.Subject
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &timetableR{}
			}
			args[i] = obj.Subject
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"subjects\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subject")
	}
	defer results.Close()

	var resultSlice []*Subject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subject")
	}

	if len(timetableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Subject = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Subject == foreign.ID {
				local.R.Subject = foreign
				break
			}
		}
	}

	return nil
}

// SetClassG of the timetable to the related item.
// Sets o.R.Class to related.
// Adds o to related.R.Timetables.
// Uses the global database handle.
func (o *Timetable) SetClassG(insert bool, related *Class) error {
	return o.SetClass(boil.GetDB(), insert, related)
}

// SetClassP of the timetable to the related item.
// Sets o.R.Class to related.
// Adds o to related.R.Timetables.
// Panics on error.
func (o *Timetable) SetClassP(exec boil.Executor, insert bool, related *Class) {
	if err := o.SetClass(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClassGP of the timetable to the related item.
// Sets o.R.Class to related.
// Adds o to related.R.Timetables.
// Uses the global database handle and panics on error.
func (o *Timetable) SetClassGP(insert bool, related *Class) {
	if err := o.SetClass(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClass of the timetable to the related item.
// Sets o.R.Class to related.
// Adds o to related.R.Timetables.
func (o *Timetable) SetClass(exec boil.Executor, insert bool, related *Class) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"back2school\".\"timetable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"class"}),
		strmangle.WhereClause("\"", "\"", 2, timetablePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Class = related.ID

	if o.R == nil {
		o.R = &timetableR{
			Class: related,
		}
	} else {
		o.R.Class = related
	}

	if related.R == nil {
		related.R = &classR{
			Timetables: TimetableSlice{o},
		}
	} else {
		related.R.Timetables = append(related.R.Timetables, o)
	}

	return nil
}

// SetSubjectG of the timetable to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.Timetables.
// Uses the global database handle.
func (o *Timetable) SetSubjectG(insert bool, related *Subject) error {
	return o.SetSubject(boil.GetDB(), insert, related)
}

// SetSubjectP of the timetable to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.Timetables.
// Panics on error.
func (o *Timetable) SetSubjectP(exec boil.Executor, insert bool, related *Subject) {
	if err := o.SetSubject(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSubjectGP of the timetable to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.Timetables.
// Uses the global database handle and panics on error.
func (o *Timetable) SetSubjectGP(insert bool, related *Subject) {
	if err := o.SetSubject(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSubject of the timetable to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.Timetables.
func (o *Timetable) SetSubject(exec boil.Executor, insert bool, related *Subject) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"back2school\".\"timetable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject"}),
		strmangle.WhereClause("\"", "\"", 2, timetablePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Subject = related.ID

	if o.R == nil {
		o.R = &timetableR{
			Subject: related,
		}
	} else {
		o.R.Subject = related
	}

	if related.R == nil {
		related.R = &subjectR{
			Timetables: TimetableSlice{o},
		}
	} else {
		related.R.Timetables = append(related.R.Timetables, o)
	}

	return nil
}

// TimetablesG retrieves all records.
func TimetablesG(mods ...qm.QueryMod) timetableQuery {
	return Timetables(boil.GetDB(), mods...)
}

// Timetables retrieves all the records using an executor.
func Timetables(exec boil.Executor, mods ...qm.QueryMod) timetableQuery {
	mods = append(mods, qm.From("\"back2school\".\"timetable\""))
	return timetableQuery{NewQuery(exec, mods...)}
}

// FindTimetableG retrieves a single record by ID.
func FindTimetableG(id int, selectCols ...string) (*Timetable, error) {
	return FindTimetable(boil.GetDB(), id, selectCols...)
}

// FindTimetableGP retrieves a single record by ID, and panics on error.
func FindTimetableGP(id int, selectCols ...string) *Timetable {
	retobj, err := FindTimetable(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTimetable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTimetable(exec boil.Executor, id int, selectCols ...string) (*Timetable, error) {
	timetableObj := &Timetable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"back2school\".\"timetable\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(timetableObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from timetable")
	}

	return timetableObj, nil
}

// FindTimetableP retrieves a single record by ID with an executor, and panics on error.
func FindTimetableP(exec boil.Executor, id int, selectCols ...string) *Timetable {
	retobj, err := FindTimetable(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Timetable) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Timetable) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Timetable) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Timetable) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no timetable provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(timetableColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	timetableInsertCacheMut.RLock()
	cache, cached := timetableInsertCache[key]
	timetableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			timetableColumns,
			timetableColumnsWithDefault,
			timetableColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(timetableType, timetableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(timetableType, timetableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"back2school\".\"timetable\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"back2school\".\"timetable\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into timetable")
	}

	if !cached {
		timetableInsertCacheMut.Lock()
		timetableInsertCache[key] = cache
		timetableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Timetable record. See Update for
// whitelist behavior description.
func (o *Timetable) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Timetable record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Timetable) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Timetable, and panics on error.
// See Update for whitelist behavior description.
func (o *Timetable) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Timetable.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Timetable) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	timetableUpdateCacheMut.RLock()
	cache, cached := timetableUpdateCache[key]
	timetableUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			timetableColumns,
			timetablePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update timetable, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"back2school\".\"timetable\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, timetablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(timetableType, timetableMapping, append(wl, timetablePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update timetable row")
	}

	if !cached {
		timetableUpdateCacheMut.Lock()
		timetableUpdateCache[key] = cache
		timetableUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q timetableQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q timetableQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for timetable")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TimetableSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TimetableSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TimetableSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TimetableSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timetablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"back2school\".\"timetable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, timetablePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in timetable slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Timetable) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Timetable) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Timetable) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Timetable) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no timetable provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(timetableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	timetableUpsertCacheMut.RLock()
	cache, cached := timetableUpsertCache[key]
	timetableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			timetableColumns,
			timetableColumnsWithDefault,
			timetableColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			timetableColumns,
			timetablePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert timetable, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(timetablePrimaryKeyColumns))
			copy(conflict, timetablePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"back2school\".\"timetable\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(timetableType, timetableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(timetableType, timetableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert timetable")
	}

	if !cached {
		timetableUpsertCacheMut.Lock()
		timetableUpsertCache[key] = cache
		timetableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Timetable record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Timetable) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Timetable record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Timetable) DeleteG() error {
	if o == nil {
		return errors.New("models: no Timetable provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Timetable record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Timetable) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Timetable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Timetable) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Timetable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), timetablePrimaryKeyMapping)
	sql := "DELETE FROM \"back2school\".\"timetable\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from timetable")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q timetableQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q timetableQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no timetableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from timetable")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TimetableSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TimetableSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Timetable slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TimetableSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TimetableSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Timetable slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(timetableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timetablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"back2school\".\"timetable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, timetablePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from timetable slice")
	}

	if len(timetableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Timetable) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Timetable) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Timetable) ReloadG() error {
	if o == nil {
		return errors.New("models: no Timetable provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Timetable) Reload(exec boil.Executor) error {
	ret, err := FindTimetable(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TimetableSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TimetableSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TimetableSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TimetableSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TimetableSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	timetables := TimetableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timetablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"back2school\".\"timetable\".* FROM \"back2school\".\"timetable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, timetablePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&timetables)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TimetableSlice")
	}

	*o = timetables

	return nil
}

// TimetableExists checks if the Timetable row exists.
func TimetableExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"back2school\".\"timetable\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if timetable exists")
	}

	return exists, nil
}

// TimetableExistsG checks if the Timetable row exists.
func TimetableExistsG(id int) (bool, error) {
	return TimetableExists(boil.GetDB(), id)
}

// TimetableExistsGP checks if the Timetable row exists. Panics on error.
func TimetableExistsGP(id int) bool {
	e, err := TimetableExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TimetableExistsP checks if the Timetable row exists. Panics on error.
func TimetableExistsP(exec boil.Executor, id int) bool {
	e, err := TimetableExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
