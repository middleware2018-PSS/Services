// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testStudents(t *testing.T) {
	t.Parallel()

	query := Students(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testStudentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = student.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Students(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := StudentSlice{student}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testStudentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := StudentExists(tx, student.ID)
	if err != nil {
		t.Errorf("Unable to check if Student exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StudentExistsG to return true, but got false.")
	}
}
func testStudentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	studentFound, err := FindStudent(tx, student.ID)
	if err != nil {
		t.Error(err)
	}

	if studentFound == nil {
		t.Error("want a record, got nil")
	}
}
func testStudentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Students(tx).Bind(student); err != nil {
		t.Error(err)
	}
}

func testStudentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Students(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStudentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	studentOne := &Student{}
	studentTwo := &Student{}
	if err = randomize.Struct(seed, studentOne, studentDBTypes, false, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}
	if err = randomize.Struct(seed, studentTwo, studentDBTypes, false, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = studentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = studentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Students(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStudentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	studentOne := &Student{}
	studentTwo := &Student{}
	if err = randomize.Struct(seed, studentOne, studentDBTypes, false, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}
	if err = randomize.Struct(seed, studentTwo, studentDBTypes, false, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = studentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = studentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func studentBeforeInsertHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentAfterInsertHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentAfterSelectHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentBeforeUpdateHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentAfterUpdateHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentBeforeDeleteHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentAfterDeleteHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentBeforeUpsertHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func studentAfterUpsertHook(e boil.Executor, o *Student) error {
	*o = Student{}
	return nil
}

func testStudentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Student{}
	o := &Student{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, studentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Student object: %s", err)
	}

	AddStudentHook(boil.BeforeInsertHook, studentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	studentBeforeInsertHooks = []StudentHook{}

	AddStudentHook(boil.AfterInsertHook, studentAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	studentAfterInsertHooks = []StudentHook{}

	AddStudentHook(boil.AfterSelectHook, studentAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	studentAfterSelectHooks = []StudentHook{}

	AddStudentHook(boil.BeforeUpdateHook, studentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	studentBeforeUpdateHooks = []StudentHook{}

	AddStudentHook(boil.AfterUpdateHook, studentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	studentAfterUpdateHooks = []StudentHook{}

	AddStudentHook(boil.BeforeDeleteHook, studentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	studentBeforeDeleteHooks = []StudentHook{}

	AddStudentHook(boil.AfterDeleteHook, studentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	studentAfterDeleteHooks = []StudentHook{}

	AddStudentHook(boil.BeforeUpsertHook, studentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	studentBeforeUpsertHooks = []StudentHook{}

	AddStudentHook(boil.AfterUpsertHook, studentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	studentAfterUpsertHooks = []StudentHook{}
}
func testStudentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx, studentColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudentToManyAppointments(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, appointmentDBTypes, false, appointmentColumnsWithDefault...)
	randomize.Struct(seed, &c, appointmentDBTypes, false, appointmentColumnsWithDefault...)

	b.Student = a.ID
	c.Student = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	appointment, err := a.Appointments(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range appointment {
		if v.Student == b.Student {
			bFound = true
		}
		if v.Student == c.Student {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudentSlice{&a}
	if err = a.L.LoadAppointments(tx, false, (*[]*Student)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Appointments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Appointments = nil
	if err = a.L.LoadAppointments(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Appointments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", appointment)
	}
}

func testStudentToManyClasses(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c Class

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, classDBTypes, false, classColumnsWithDefault...)
	randomize.Struct(seed, &c, classDBTypes, false, classColumnsWithDefault...)

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"back2school\".\"enrolled\" (\"student\", \"class\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"back2school\".\"enrolled\" (\"student\", \"class\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	class, err := a.Classes(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range class {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudentSlice{&a}
	if err = a.L.LoadClasses(tx, false, (*[]*Student)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Classes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Classes = nil
	if err = a.L.LoadClasses(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Classes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", class)
	}
}

func testStudentToManyGrades(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c Grade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, gradeDBTypes, false, gradeColumnsWithDefault...)
	randomize.Struct(seed, &c, gradeDBTypes, false, gradeColumnsWithDefault...)

	b.Student.Valid = true
	c.Student.Valid = true
	b.Student.Int = a.ID
	c.Student.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	grade, err := a.Grades(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range grade {
		if v.Student.Int == b.Student.Int {
			bFound = true
		}
		if v.Student.Int == c.Student.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudentSlice{&a}
	if err = a.L.LoadGrades(tx, false, (*[]*Student)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Grades); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Grades = nil
	if err = a.L.LoadGrades(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Grades); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", grade)
	}
}

func testStudentToManyParents(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c Parent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, parentDBTypes, false, parentColumnsWithDefault...)
	randomize.Struct(seed, &c, parentDBTypes, false, parentColumnsWithDefault...)

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"back2school\".\"isparent\" (\"student\", \"parent\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"back2school\".\"isparent\" (\"student\", \"parent\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	parent, err := a.Parents(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range parent {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudentSlice{&a}
	if err = a.L.LoadParents(tx, false, (*[]*Student)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Parents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Parents = nil
	if err = a.L.LoadParents(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Parents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", parent)
	}
}

func testStudentToManyPayments(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, paymentDBTypes, false, paymentColumnsWithDefault...)
	randomize.Struct(seed, &c, paymentDBTypes, false, paymentColumnsWithDefault...)

	b.Student.Valid = true
	c.Student.Valid = true
	b.Student.Int = a.ID
	c.Student.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	payment, err := a.Payments(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range payment {
		if v.Student.Int == b.Student.Int {
			bFound = true
		}
		if v.Student.Int == c.Student.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudentSlice{&a}
	if err = a.L.LoadPayments(tx, false, (*[]*Student)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Payments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Payments = nil
	if err = a.L.LoadPayments(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Payments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", payment)
	}
}

func testStudentToManyAddOpAppointments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Appointment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Appointment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAppointments(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Student {
			t.Error("foreign key was wrong value", a.ID, first.Student)
		}
		if a.ID != second.Student {
			t.Error("foreign key was wrong value", a.ID, second.Student)
		}

		if first.R.Student != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Student != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Appointments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Appointments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Appointments(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStudentToManyAddOpClasses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Class

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Class{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Class{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddClasses(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Students[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Students[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Classes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Classes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Classes(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudentToManySetOpClasses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Class

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Class{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetClasses(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Classes(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetClasses(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Classes(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Students) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Students) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Students[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Students[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Classes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Classes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudentToManyRemoveOpClasses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Class

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Class{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, classDBTypes, false, strmangle.SetComplement(classPrimaryKeyColumns, classColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddClasses(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Classes(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveClasses(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Classes(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Students) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Students) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Students[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Students[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Classes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Classes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Classes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudentToManyAddOpGrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Grade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Grade{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gradeDBTypes, false, strmangle.SetComplement(gradePrimaryKeyColumns, gradeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Grade{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGrades(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Student.Int {
			t.Error("foreign key was wrong value", a.ID, first.Student.Int)
		}
		if a.ID != second.Student.Int {
			t.Error("foreign key was wrong value", a.ID, second.Student.Int)
		}

		if first.R.Student != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Student != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Grades[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Grades[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Grades(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudentToManySetOpGrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Grade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Grade{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gradeDBTypes, false, strmangle.SetComplement(gradePrimaryKeyColumns, gradeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetGrades(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Grades(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGrades(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Grades(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Student.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Student.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.Student.Int {
		t.Error("foreign key was wrong value", a.ID, d.Student.Int)
	}
	if a.ID != e.Student.Int {
		t.Error("foreign key was wrong value", a.ID, e.Student.Int)
	}

	if b.R.Student != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Student != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Student != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Student != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Grades[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Grades[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudentToManyRemoveOpGrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Grade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Grade{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gradeDBTypes, false, strmangle.SetComplement(gradePrimaryKeyColumns, gradeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddGrades(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Grades(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGrades(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Grades(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Student.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Student.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Student != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Student != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Student != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Student != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Grades) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Grades[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Grades[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudentToManyAddOpParents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Parent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Parent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, parentDBTypes, false, strmangle.SetComplement(parentPrimaryKeyColumns, parentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Parent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Students[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Students[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Parents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Parents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Parents(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudentToManySetOpParents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Parent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Parent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, parentDBTypes, false, strmangle.SetComplement(parentPrimaryKeyColumns, parentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetParents(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Parents(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParents(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Parents(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Students) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Students) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Students[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Students[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Parents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Parents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudentToManyRemoveOpParents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Parent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Parent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, parentDBTypes, false, strmangle.SetComplement(parentPrimaryKeyColumns, parentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddParents(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Parents(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParents(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Parents(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Students) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Students) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Students[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Students[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Parents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Parents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Parents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudentToManyAddOpPayments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Payment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPayments(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Student.Int {
			t.Error("foreign key was wrong value", a.ID, first.Student.Int)
		}
		if a.ID != second.Student.Int {
			t.Error("foreign key was wrong value", a.ID, second.Student.Int)
		}

		if first.R.Student != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Student != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Payments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Payments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Payments(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudentToManySetOpPayments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetPayments(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Payments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPayments(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Payments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Student.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Student.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.Student.Int {
		t.Error("foreign key was wrong value", a.ID, d.Student.Int)
	}
	if a.ID != e.Student.Int {
		t.Error("foreign key was wrong value", a.ID, e.Student.Int)
	}

	if b.R.Student != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Student != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Student != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Student != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Payments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Payments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudentToManyRemoveOpPayments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Student
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddPayments(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Payments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePayments(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Payments(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Student.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Student.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Student != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Student != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Student != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Student != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Payments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Payments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Payments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = student.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testStudentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := StudentSlice{student}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testStudentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Students(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	studentDBTypes = map[string]string{`ID`: `integer`, `Info`: `text`, `Mail`: `text`, `Name`: `text`, `Surname`: `text`}
	_              = bytes.MinRead
)

func testStudentsUpdate(t *testing.T) {
	t.Parallel()

	if len(studentColumns) == len(studentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	if err = student.Update(tx); err != nil {
		t.Error(err)
	}
}

func testStudentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(studentColumns) == len(studentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	student := &Student{}
	if err = randomize.Struct(seed, student, studentDBTypes, true, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, student, studentDBTypes, true, studentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(studentColumns, studentPrimaryKeyColumns) {
		fields = studentColumns
	} else {
		fields = strmangle.SetComplement(
			studentColumns,
			studentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(student))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := StudentSlice{student}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testStudentsUpsert(t *testing.T) {
	t.Parallel()

	if len(studentColumns) == len(studentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	student := Student{}
	if err = randomize.Struct(seed, &student, studentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = student.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Student: %s", err)
	}

	count, err := Students(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &student, studentDBTypes, false, studentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	if err = student.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Student: %s", err)
	}

	count, err = Students(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
