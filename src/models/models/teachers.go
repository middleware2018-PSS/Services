// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Teacher is an object representing the database table.
type Teacher struct {
	ID       int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Mail     null.String `boil:"mail" json:"mail,omitempty" toml:"mail" yaml:"mail,omitempty"`
	Info     null.String `boil:"info" json:"info,omitempty" toml:"info" yaml:"info,omitempty"`
	Surname  null.String `boil:"surname" json:"surname,omitempty" toml:"surname" yaml:"surname,omitempty"`
	Password string      `boil:"password" json:"password" toml:"password" yaml:"password"`

	R *teacherR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teacherL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeacherColumns = struct {
	ID       string
	Name     string
	Mail     string
	Info     string
	Surname  string
	Password string
}{
	ID:       "id",
	Name:     "name",
	Mail:     "mail",
	Info:     "info",
	Surname:  "surname",
	Password: "password",
}

// teacherR is where relationships are stored.
type teacherR struct {
	Appointments AppointmentSlice
	Grades       GradeSlice
	Teaches      TeachSlice
}

// teacherL is where Load methods for each relationship are stored.
type teacherL struct{}

var (
	teacherColumns               = []string{"id", "name", "mail", "info", "surname", "password"}
	teacherColumnsWithoutDefault = []string{}
	teacherColumnsWithDefault    = []string{"id", "name", "mail", "info", "surname", "password"}
	teacherPrimaryKeyColumns     = []string{"id"}
)

type (
	// TeacherSlice is an alias for a slice of pointers to Teacher.
	// This should generally be used opposed to []Teacher.
	TeacherSlice []*Teacher
	// TeacherHook is the signature for custom Teacher hook methods
	TeacherHook func(boil.Executor, *Teacher) error

	teacherQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teacherType                 = reflect.TypeOf(&Teacher{})
	teacherMapping              = queries.MakeStructMapping(teacherType)
	teacherPrimaryKeyMapping, _ = queries.BindMapping(teacherType, teacherMapping, teacherPrimaryKeyColumns)
	teacherInsertCacheMut       sync.RWMutex
	teacherInsertCache          = make(map[string]insertCache)
	teacherUpdateCacheMut       sync.RWMutex
	teacherUpdateCache          = make(map[string]updateCache)
	teacherUpsertCacheMut       sync.RWMutex
	teacherUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var teacherBeforeInsertHooks []TeacherHook
var teacherBeforeUpdateHooks []TeacherHook
var teacherBeforeDeleteHooks []TeacherHook
var teacherBeforeUpsertHooks []TeacherHook

var teacherAfterInsertHooks []TeacherHook
var teacherAfterSelectHooks []TeacherHook
var teacherAfterUpdateHooks []TeacherHook
var teacherAfterDeleteHooks []TeacherHook
var teacherAfterUpsertHooks []TeacherHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Teacher) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teacherBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Teacher) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teacherBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Teacher) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teacherBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Teacher) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teacherBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Teacher) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teacherAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Teacher) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range teacherAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Teacher) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teacherAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Teacher) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teacherAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Teacher) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teacherAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeacherHook registers your hook function for all future operations.
func AddTeacherHook(hookPoint boil.HookPoint, teacherHook TeacherHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		teacherBeforeInsertHooks = append(teacherBeforeInsertHooks, teacherHook)
	case boil.BeforeUpdateHook:
		teacherBeforeUpdateHooks = append(teacherBeforeUpdateHooks, teacherHook)
	case boil.BeforeDeleteHook:
		teacherBeforeDeleteHooks = append(teacherBeforeDeleteHooks, teacherHook)
	case boil.BeforeUpsertHook:
		teacherBeforeUpsertHooks = append(teacherBeforeUpsertHooks, teacherHook)
	case boil.AfterInsertHook:
		teacherAfterInsertHooks = append(teacherAfterInsertHooks, teacherHook)
	case boil.AfterSelectHook:
		teacherAfterSelectHooks = append(teacherAfterSelectHooks, teacherHook)
	case boil.AfterUpdateHook:
		teacherAfterUpdateHooks = append(teacherAfterUpdateHooks, teacherHook)
	case boil.AfterDeleteHook:
		teacherAfterDeleteHooks = append(teacherAfterDeleteHooks, teacherHook)
	case boil.AfterUpsertHook:
		teacherAfterUpsertHooks = append(teacherAfterUpsertHooks, teacherHook)
	}
}

// OneP returns a single teacher record from the query, and panics on error.
func (q teacherQuery) OneP() *Teacher {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single teacher record from the query.
func (q teacherQuery) One() (*Teacher, error) {
	o := &Teacher{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for teachers")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Teacher records from the query, and panics on error.
func (q teacherQuery) AllP() TeacherSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Teacher records from the query.
func (q teacherQuery) All() (TeacherSlice, error) {
	var o []*Teacher

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Teacher slice")
	}

	if len(teacherAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Teacher records in the query, and panics on error.
func (q teacherQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Teacher records in the query.
func (q teacherQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count teachers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q teacherQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q teacherQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if teachers exists")
	}

	return count > 0, nil
}

// AppointmentsG retrieves all the appointment's appointments.
func (o *Teacher) AppointmentsG(mods ...qm.QueryMod) appointmentQuery {
	return o.Appointments(boil.GetDB(), mods...)
}

// Appointments retrieves all the appointment's appointments with an executor.
func (o *Teacher) Appointments(exec boil.Executor, mods ...qm.QueryMod) appointmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"back2school\".\"appointments\".\"teacher\"=?", o.ID),
	)

	query := Appointments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"appointments\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"back2school\".\"appointments\".*"})
	}

	return query
}

// GradesG retrieves all the grade's grades.
func (o *Teacher) GradesG(mods ...qm.QueryMod) gradeQuery {
	return o.Grades(boil.GetDB(), mods...)
}

// Grades retrieves all the grade's grades with an executor.
func (o *Teacher) Grades(exec boil.Executor, mods ...qm.QueryMod) gradeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"back2school\".\"grades\".\"teacher\"=?", o.ID),
	)

	query := Grades(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"grades\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"back2school\".\"grades\".*"})
	}

	return query
}

// TeachesG retrieves all the teach's teaches.
func (o *Teacher) TeachesG(mods ...qm.QueryMod) teachQuery {
	return o.Teaches(boil.GetDB(), mods...)
}

// Teaches retrieves all the teach's teaches with an executor.
func (o *Teacher) Teaches(exec boil.Executor, mods ...qm.QueryMod) teachQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"back2school\".\"teaches\".\"teacher\"=?", o.ID),
	)

	query := Teaches(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"teaches\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"back2school\".\"teaches\".*"})
	}

	return query
}

// LoadAppointments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (teacherL) LoadAppointments(e boil.Executor, singular bool, maybeTeacher interface{}) error {
	var slice []*Teacher
	var object *Teacher

	count := 1
	if singular {
		object = maybeTeacher.(*Teacher)
	} else {
		slice = *maybeTeacher.(*[]*Teacher)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &teacherR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &teacherR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"appointments\" where \"teacher\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load appointments")
	}
	defer results.Close()

	var resultSlice []*Appointment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice appointments")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Appointments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Teacher {
				local.R.Appointments = append(local.R.Appointments, foreign)
				break
			}
		}
	}

	return nil
}

// LoadGrades allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (teacherL) LoadGrades(e boil.Executor, singular bool, maybeTeacher interface{}) error {
	var slice []*Teacher
	var object *Teacher

	count := 1
	if singular {
		object = maybeTeacher.(*Teacher)
	} else {
		slice = *maybeTeacher.(*[]*Teacher)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &teacherR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &teacherR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"grades\" where \"teacher\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load grades")
	}
	defer results.Close()

	var resultSlice []*Grade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice grades")
	}

	if len(gradeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Grades = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Teacher {
				local.R.Grades = append(local.R.Grades, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTeaches allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (teacherL) LoadTeaches(e boil.Executor, singular bool, maybeTeacher interface{}) error {
	var slice []*Teacher
	var object *Teacher

	count := 1
	if singular {
		object = maybeTeacher.(*Teacher)
	} else {
		slice = *maybeTeacher.(*[]*Teacher)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &teacherR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &teacherR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"teaches\" where \"teacher\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load teaches")
	}
	defer results.Close()

	var resultSlice []*Teach
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice teaches")
	}

	if len(teachAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Teaches = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Teacher {
				local.R.Teaches = append(local.R.Teaches, foreign)
				break
			}
		}
	}

	return nil
}

// AddAppointmentsG adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Appointments.
// Sets related.R.Teacher appropriately.
// Uses the global database handle.
func (o *Teacher) AddAppointmentsG(insert bool, related ...*Appointment) error {
	return o.AddAppointments(boil.GetDB(), insert, related...)
}

// AddAppointmentsP adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Appointments.
// Sets related.R.Teacher appropriately.
// Panics on error.
func (o *Teacher) AddAppointmentsP(exec boil.Executor, insert bool, related ...*Appointment) {
	if err := o.AddAppointments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAppointmentsGP adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Appointments.
// Sets related.R.Teacher appropriately.
// Uses the global database handle and panics on error.
func (o *Teacher) AddAppointmentsGP(insert bool, related ...*Appointment) {
	if err := o.AddAppointments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAppointments adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Appointments.
// Sets related.R.Teacher appropriately.
func (o *Teacher) AddAppointments(exec boil.Executor, insert bool, related ...*Appointment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Teacher = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"back2school\".\"appointments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"teacher"}),
				strmangle.WhereClause("\"", "\"", 2, appointmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Teacher = o.ID
		}
	}

	if o.R == nil {
		o.R = &teacherR{
			Appointments: related,
		}
	} else {
		o.R.Appointments = append(o.R.Appointments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appointmentR{
				Teacher: o,
			}
		} else {
			rel.R.Teacher = o
		}
	}
	return nil
}

// AddGradesG adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Grades.
// Sets related.R.Teacher appropriately.
// Uses the global database handle.
func (o *Teacher) AddGradesG(insert bool, related ...*Grade) error {
	return o.AddGrades(boil.GetDB(), insert, related...)
}

// AddGradesP adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Grades.
// Sets related.R.Teacher appropriately.
// Panics on error.
func (o *Teacher) AddGradesP(exec boil.Executor, insert bool, related ...*Grade) {
	if err := o.AddGrades(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGradesGP adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Grades.
// Sets related.R.Teacher appropriately.
// Uses the global database handle and panics on error.
func (o *Teacher) AddGradesGP(insert bool, related ...*Grade) {
	if err := o.AddGrades(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGrades adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Grades.
// Sets related.R.Teacher appropriately.
func (o *Teacher) AddGrades(exec boil.Executor, insert bool, related ...*Grade) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Teacher = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"back2school\".\"grades\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"teacher"}),
				strmangle.WhereClause("\"", "\"", 2, gradePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Teacher = o.ID
		}
	}

	if o.R == nil {
		o.R = &teacherR{
			Grades: related,
		}
	} else {
		o.R.Grades = append(o.R.Grades, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gradeR{
				Teacher: o,
			}
		} else {
			rel.R.Teacher = o
		}
	}
	return nil
}

// AddTeachesG adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Teaches.
// Sets related.R.Teacher appropriately.
// Uses the global database handle.
func (o *Teacher) AddTeachesG(insert bool, related ...*Teach) error {
	return o.AddTeaches(boil.GetDB(), insert, related...)
}

// AddTeachesP adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Teaches.
// Sets related.R.Teacher appropriately.
// Panics on error.
func (o *Teacher) AddTeachesP(exec boil.Executor, insert bool, related ...*Teach) {
	if err := o.AddTeaches(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTeachesGP adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Teaches.
// Sets related.R.Teacher appropriately.
// Uses the global database handle and panics on error.
func (o *Teacher) AddTeachesGP(insert bool, related ...*Teach) {
	if err := o.AddTeaches(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTeaches adds the given related objects to the existing relationships
// of the teacher, optionally inserting them as new records.
// Appends related to o.R.Teaches.
// Sets related.R.Teacher appropriately.
func (o *Teacher) AddTeaches(exec boil.Executor, insert bool, related ...*Teach) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Teacher = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"back2school\".\"teaches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"teacher"}),
				strmangle.WhereClause("\"", "\"", 2, teachPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Teacher, rel.Subject, rel.Class}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Teacher = o.ID
		}
	}

	if o.R == nil {
		o.R = &teacherR{
			Teaches: related,
		}
	} else {
		o.R.Teaches = append(o.R.Teaches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teachR{
				Teacher: o,
			}
		} else {
			rel.R.Teacher = o
		}
	}
	return nil
}

// TeachersG retrieves all records.
func TeachersG(mods ...qm.QueryMod) teacherQuery {
	return Teachers(boil.GetDB(), mods...)
}

// Teachers retrieves all the records using an executor.
func Teachers(exec boil.Executor, mods ...qm.QueryMod) teacherQuery {
	mods = append(mods, qm.From("\"back2school\".\"teachers\""))
	return teacherQuery{NewQuery(exec, mods...)}
}

// FindTeacherG retrieves a single record by ID.
func FindTeacherG(id int, selectCols ...string) (*Teacher, error) {
	return FindTeacher(boil.GetDB(), id, selectCols...)
}

// FindTeacherGP retrieves a single record by ID, and panics on error.
func FindTeacherGP(id int, selectCols ...string) *Teacher {
	retobj, err := FindTeacher(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTeacher retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeacher(exec boil.Executor, id int, selectCols ...string) (*Teacher, error) {
	teacherObj := &Teacher{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"back2school\".\"teachers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(teacherObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from teachers")
	}

	return teacherObj, nil
}

// FindTeacherP retrieves a single record by ID with an executor, and panics on error.
func FindTeacherP(exec boil.Executor, id int, selectCols ...string) *Teacher {
	retobj, err := FindTeacher(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Teacher) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Teacher) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Teacher) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Teacher) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no teachers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teacherColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	teacherInsertCacheMut.RLock()
	cache, cached := teacherInsertCache[key]
	teacherInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			teacherColumns,
			teacherColumnsWithDefault,
			teacherColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(teacherType, teacherMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teacherType, teacherMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"back2school\".\"teachers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"back2school\".\"teachers\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into teachers")
	}

	if !cached {
		teacherInsertCacheMut.Lock()
		teacherInsertCache[key] = cache
		teacherInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Teacher record. See Update for
// whitelist behavior description.
func (o *Teacher) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Teacher record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Teacher) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Teacher, and panics on error.
// See Update for whitelist behavior description.
func (o *Teacher) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Teacher.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Teacher) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	teacherUpdateCacheMut.RLock()
	cache, cached := teacherUpdateCache[key]
	teacherUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			teacherColumns,
			teacherPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update teachers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"back2school\".\"teachers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, teacherPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teacherType, teacherMapping, append(wl, teacherPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update teachers row")
	}

	if !cached {
		teacherUpdateCacheMut.Lock()
		teacherUpdateCache[key] = cache
		teacherUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q teacherQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q teacherQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for teachers")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TeacherSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TeacherSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TeacherSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeacherSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teacherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"back2school\".\"teachers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, teacherPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in teacher slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Teacher) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Teacher) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Teacher) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Teacher) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no teachers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teacherColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teacherUpsertCacheMut.RLock()
	cache, cached := teacherUpsertCache[key]
	teacherUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			teacherColumns,
			teacherColumnsWithDefault,
			teacherColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			teacherColumns,
			teacherPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert teachers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(teacherPrimaryKeyColumns))
			copy(conflict, teacherPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"back2school\".\"teachers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(teacherType, teacherMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teacherType, teacherMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert teachers")
	}

	if !cached {
		teacherUpsertCacheMut.Lock()
		teacherUpsertCache[key] = cache
		teacherUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Teacher record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Teacher) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Teacher record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Teacher) DeleteG() error {
	if o == nil {
		return errors.New("models: no Teacher provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Teacher record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Teacher) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Teacher record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Teacher) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Teacher provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teacherPrimaryKeyMapping)
	sql := "DELETE FROM \"back2school\".\"teachers\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from teachers")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q teacherQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q teacherQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no teacherQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from teachers")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TeacherSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TeacherSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Teacher slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TeacherSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeacherSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Teacher slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(teacherBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teacherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"back2school\".\"teachers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teacherPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from teacher slice")
	}

	if len(teacherAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Teacher) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Teacher) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Teacher) ReloadG() error {
	if o == nil {
		return errors.New("models: no Teacher provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Teacher) Reload(exec boil.Executor) error {
	ret, err := FindTeacher(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TeacherSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TeacherSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeacherSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TeacherSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeacherSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	teachers := TeacherSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teacherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"back2school\".\"teachers\".* FROM \"back2school\".\"teachers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teacherPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&teachers)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TeacherSlice")
	}

	*o = teachers

	return nil
}

// TeacherExists checks if the Teacher row exists.
func TeacherExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"back2school\".\"teachers\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if teachers exists")
	}

	return exists, nil
}

// TeacherExistsG checks if the Teacher row exists.
func TeacherExistsG(id int) (bool, error) {
	return TeacherExists(boil.GetDB(), id)
}

// TeacherExistsGP checks if the Teacher row exists. Panics on error.
func TeacherExistsGP(id int) bool {
	e, err := TeacherExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TeacherExistsP checks if the Teacher row exists. Panics on error.
func TeacherExistsP(exec boil.Executor, id int) bool {
	e, err := TeacherExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
