// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSubjects(t *testing.T) {
	t.Parallel()

	query := Subjects(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSubjectsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = subject.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Subjects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubjectsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Subjects(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Subjects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubjectsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SubjectSlice{subject}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Subjects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSubjectsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SubjectExists(tx, subject.ID)
	if err != nil {
		t.Errorf("Unable to check if Subject exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SubjectExistsG to return true, but got false.")
	}
}
func testSubjectsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	subjectFound, err := FindSubject(tx, subject.ID)
	if err != nil {
		t.Error(err)
	}

	if subjectFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSubjectsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Subjects(tx).Bind(subject); err != nil {
		t.Error(err)
	}
}

func testSubjectsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Subjects(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSubjectsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subjectOne := &Subject{}
	subjectTwo := &Subject{}
	if err = randomize.Struct(seed, subjectOne, subjectDBTypes, false, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}
	if err = randomize.Struct(seed, subjectTwo, subjectDBTypes, false, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subjectOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = subjectTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Subjects(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSubjectsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	subjectOne := &Subject{}
	subjectTwo := &Subject{}
	if err = randomize.Struct(seed, subjectOne, subjectDBTypes, false, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}
	if err = randomize.Struct(seed, subjectTwo, subjectDBTypes, false, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subjectOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = subjectTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Subjects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func subjectBeforeInsertHook(e boil.Executor, o *Subject) error {
	*o = Subject{}
	return nil
}

func subjectAfterInsertHook(e boil.Executor, o *Subject) error {
	*o = Subject{}
	return nil
}

func subjectAfterSelectHook(e boil.Executor, o *Subject) error {
	*o = Subject{}
	return nil
}

func subjectBeforeUpdateHook(e boil.Executor, o *Subject) error {
	*o = Subject{}
	return nil
}

func subjectAfterUpdateHook(e boil.Executor, o *Subject) error {
	*o = Subject{}
	return nil
}

func subjectBeforeDeleteHook(e boil.Executor, o *Subject) error {
	*o = Subject{}
	return nil
}

func subjectAfterDeleteHook(e boil.Executor, o *Subject) error {
	*o = Subject{}
	return nil
}

func subjectBeforeUpsertHook(e boil.Executor, o *Subject) error {
	*o = Subject{}
	return nil
}

func subjectAfterUpsertHook(e boil.Executor, o *Subject) error {
	*o = Subject{}
	return nil
}

func testSubjectsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Subject{}
	o := &Subject{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, subjectDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Subject object: %s", err)
	}

	AddSubjectHook(boil.BeforeInsertHook, subjectBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	subjectBeforeInsertHooks = []SubjectHook{}

	AddSubjectHook(boil.AfterInsertHook, subjectAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	subjectAfterInsertHooks = []SubjectHook{}

	AddSubjectHook(boil.AfterSelectHook, subjectAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	subjectAfterSelectHooks = []SubjectHook{}

	AddSubjectHook(boil.BeforeUpdateHook, subjectBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	subjectBeforeUpdateHooks = []SubjectHook{}

	AddSubjectHook(boil.AfterUpdateHook, subjectAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	subjectAfterUpdateHooks = []SubjectHook{}

	AddSubjectHook(boil.BeforeDeleteHook, subjectBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	subjectBeforeDeleteHooks = []SubjectHook{}

	AddSubjectHook(boil.AfterDeleteHook, subjectAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	subjectAfterDeleteHooks = []SubjectHook{}

	AddSubjectHook(boil.BeforeUpsertHook, subjectBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	subjectBeforeUpsertHooks = []SubjectHook{}

	AddSubjectHook(boil.AfterUpsertHook, subjectAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	subjectAfterUpsertHooks = []SubjectHook{}
}
func testSubjectsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Subjects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSubjectsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx, subjectColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Subjects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSubjectToManyTeaches(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Subject
	var b, c Teach

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, teachDBTypes, false, teachColumnsWithDefault...)
	randomize.Struct(seed, &c, teachDBTypes, false, teachColumnsWithDefault...)

	b.Subject = a.ID
	c.Subject = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	teach, err := a.Teaches(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range teach {
		if v.Subject == b.Subject {
			bFound = true
		}
		if v.Subject == c.Subject {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SubjectSlice{&a}
	if err = a.L.LoadTeaches(tx, false, (*[]*Subject)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Teaches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Teaches = nil
	if err = a.L.LoadTeaches(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Teaches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", teach)
	}
}

func testSubjectToManyTimetables(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Subject
	var b, c Timetable

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, timetableDBTypes, false, timetableColumnsWithDefault...)
	randomize.Struct(seed, &c, timetableDBTypes, false, timetableColumnsWithDefault...)

	b.Subject = a.ID
	c.Subject = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	timetable, err := a.Timetables(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range timetable {
		if v.Subject == b.Subject {
			bFound = true
		}
		if v.Subject == c.Subject {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SubjectSlice{&a}
	if err = a.L.LoadTimetables(tx, false, (*[]*Subject)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Timetables); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Timetables = nil
	if err = a.L.LoadTimetables(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Timetables); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", timetable)
	}
}

func testSubjectToManyAddOpTeaches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Subject
	var b, c, d, e Teach

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, subjectDBTypes, false, strmangle.SetComplement(subjectPrimaryKeyColumns, subjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Teach{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teachDBTypes, false, strmangle.SetComplement(teachPrimaryKeyColumns, teachColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Teach{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeaches(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Subject {
			t.Error("foreign key was wrong value", a.ID, first.Subject)
		}
		if a.ID != second.Subject {
			t.Error("foreign key was wrong value", a.ID, second.Subject)
		}

		if first.R.Subject != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Subject != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Teaches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Teaches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Teaches(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSubjectToManyAddOpTimetables(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Subject
	var b, c, d, e Timetable

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, subjectDBTypes, false, strmangle.SetComplement(subjectPrimaryKeyColumns, subjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Timetable{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, timetableDBTypes, false, strmangle.SetComplement(timetablePrimaryKeyColumns, timetableColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Timetable{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTimetables(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Subject {
			t.Error("foreign key was wrong value", a.ID, first.Subject)
		}
		if a.ID != second.Subject {
			t.Error("foreign key was wrong value", a.ID, second.Subject)
		}

		if first.R.Subject != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Subject != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Timetables[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Timetables[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Timetables(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSubjectsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = subject.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSubjectsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SubjectSlice{subject}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSubjectsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Subjects(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	subjectDBTypes = map[string]string{`ID`: `text`}
	_              = bytes.MinRead
)

func testSubjectsUpdate(t *testing.T) {
	t.Parallel()

	if len(subjectColumns) == len(subjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Subjects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	if err = subject.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSubjectsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(subjectColumns) == len(subjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	subject := &Subject{}
	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Subjects(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, subject, subjectDBTypes, true, subjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(subjectColumns, subjectPrimaryKeyColumns) {
		fields = subjectColumns
	} else {
		fields = strmangle.SetComplement(
			subjectColumns,
			subjectPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(subject))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SubjectSlice{subject}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSubjectsUpsert(t *testing.T) {
	t.Parallel()

	if len(subjectColumns) == len(subjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	subject := Subject{}
	if err = randomize.Struct(seed, &subject, subjectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = subject.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Subject: %s", err)
	}

	count, err := Subjects(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &subject, subjectDBTypes, false, subjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	if err = subject.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Subject: %s", err)
	}

	count, err = Subjects(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
