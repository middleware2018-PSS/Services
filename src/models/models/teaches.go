// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Teach is an object representing the database table.
type Teach struct {
	Teacher int    `boil:"teacher" json:"teacher" toml:"teacher" yaml:"teacher"`
	Subject string `boil:"subject" json:"subject" toml:"subject" yaml:"subject"`
	Class   int    `boil:"class" json:"class" toml:"class" yaml:"class"`

	R *teachR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teachL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeachColumns = struct {
	Teacher string
	Subject string
	Class   string
}{
	Teacher: "teacher",
	Subject: "subject",
	Class:   "class",
}

// teachR is where relationships are stored.
type teachR struct {
	Subject *Subject
	Teacher *Teacher
	Class   *Class
}

// teachL is where Load methods for each relationship are stored.
type teachL struct{}

var (
	teachColumns               = []string{"teacher", "subject", "class"}
	teachColumnsWithoutDefault = []string{"teacher", "class"}
	teachColumnsWithDefault    = []string{"subject"}
	teachPrimaryKeyColumns     = []string{"teacher", "subject", "class"}
)

type (
	// TeachSlice is an alias for a slice of pointers to Teach.
	// This should generally be used opposed to []Teach.
	TeachSlice []*Teach
	// TeachHook is the signature for custom Teach hook methods
	TeachHook func(boil.Executor, *Teach) error

	teachQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teachType                 = reflect.TypeOf(&Teach{})
	teachMapping              = queries.MakeStructMapping(teachType)
	teachPrimaryKeyMapping, _ = queries.BindMapping(teachType, teachMapping, teachPrimaryKeyColumns)
	teachInsertCacheMut       sync.RWMutex
	teachInsertCache          = make(map[string]insertCache)
	teachUpdateCacheMut       sync.RWMutex
	teachUpdateCache          = make(map[string]updateCache)
	teachUpsertCacheMut       sync.RWMutex
	teachUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var teachBeforeInsertHooks []TeachHook
var teachBeforeUpdateHooks []TeachHook
var teachBeforeDeleteHooks []TeachHook
var teachBeforeUpsertHooks []TeachHook

var teachAfterInsertHooks []TeachHook
var teachAfterSelectHooks []TeachHook
var teachAfterUpdateHooks []TeachHook
var teachAfterDeleteHooks []TeachHook
var teachAfterUpsertHooks []TeachHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Teach) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teachBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Teach) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teachBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Teach) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teachBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Teach) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teachBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Teach) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teachAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Teach) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range teachAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Teach) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teachAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Teach) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teachAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Teach) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teachAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeachHook registers your hook function for all future operations.
func AddTeachHook(hookPoint boil.HookPoint, teachHook TeachHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		teachBeforeInsertHooks = append(teachBeforeInsertHooks, teachHook)
	case boil.BeforeUpdateHook:
		teachBeforeUpdateHooks = append(teachBeforeUpdateHooks, teachHook)
	case boil.BeforeDeleteHook:
		teachBeforeDeleteHooks = append(teachBeforeDeleteHooks, teachHook)
	case boil.BeforeUpsertHook:
		teachBeforeUpsertHooks = append(teachBeforeUpsertHooks, teachHook)
	case boil.AfterInsertHook:
		teachAfterInsertHooks = append(teachAfterInsertHooks, teachHook)
	case boil.AfterSelectHook:
		teachAfterSelectHooks = append(teachAfterSelectHooks, teachHook)
	case boil.AfterUpdateHook:
		teachAfterUpdateHooks = append(teachAfterUpdateHooks, teachHook)
	case boil.AfterDeleteHook:
		teachAfterDeleteHooks = append(teachAfterDeleteHooks, teachHook)
	case boil.AfterUpsertHook:
		teachAfterUpsertHooks = append(teachAfterUpsertHooks, teachHook)
	}
}

// OneP returns a single teach record from the query, and panics on error.
func (q teachQuery) OneP() *Teach {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single teach record from the query.
func (q teachQuery) One() (*Teach, error) {
	o := &Teach{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for teaches")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Teach records from the query, and panics on error.
func (q teachQuery) AllP() TeachSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Teach records from the query.
func (q teachQuery) All() (TeachSlice, error) {
	var o []*Teach

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Teach slice")
	}

	if len(teachAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Teach records in the query, and panics on error.
func (q teachQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Teach records in the query.
func (q teachQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count teaches rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q teachQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q teachQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if teaches exists")
	}

	return count > 0, nil
}

// SubjectG pointed to by the foreign key.
func (o *Teach) SubjectG(mods ...qm.QueryMod) subjectQuery {
	return o.Subject(boil.GetDB(), mods...)
}

// Subject pointed to by the foreign key.
func (o *Teach) Subject(exec boil.Executor, mods ...qm.QueryMod) subjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Subject),
	}

	queryMods = append(queryMods, mods...)

	query := Subjects(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"subjects\"")

	return query
}

// TeacherG pointed to by the foreign key.
func (o *Teach) TeacherG(mods ...qm.QueryMod) teacherQuery {
	return o.Teacher(boil.GetDB(), mods...)
}

// Teacher pointed to by the foreign key.
func (o *Teach) Teacher(exec boil.Executor, mods ...qm.QueryMod) teacherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Teacher),
	}

	queryMods = append(queryMods, mods...)

	query := Teachers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"teachers\"")

	return query
}

// ClassG pointed to by the foreign key.
func (o *Teach) ClassG(mods ...qm.QueryMod) classQuery {
	return o.Class(boil.GetDB(), mods...)
}

// Class pointed to by the foreign key.
func (o *Teach) Class(exec boil.Executor, mods ...qm.QueryMod) classQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Class),
	}

	queryMods = append(queryMods, mods...)

	query := Classes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"classes\"")

	return query
} // LoadSubject allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (teachL) LoadSubject(e boil.Executor, singular bool, maybeTeach interface{}) error {
	var slice []*Teach
	var object *Teach

	count := 1
	if singular {
		object = maybeTeach.(*Teach)
	} else {
		slice = *maybeTeach.(*[]*Teach)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &teachR{}
		}
		args[0] = object.Subject
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &teachR{}
			}
			args[i] = obj.Subject
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"subjects\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subject")
	}
	defer results.Close()

	var resultSlice []*Subject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subject")
	}

	if len(teachAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Subject = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Subject == foreign.ID {
				local.R.Subject = foreign
				break
			}
		}
	}

	return nil
}

// LoadTeacher allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (teachL) LoadTeacher(e boil.Executor, singular bool, maybeTeach interface{}) error {
	var slice []*Teach
	var object *Teach

	count := 1
	if singular {
		object = maybeTeach.(*Teach)
	} else {
		slice = *maybeTeach.(*[]*Teach)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &teachR{}
		}
		args[0] = object.Teacher
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &teachR{}
			}
			args[i] = obj.Teacher
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"teachers\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Teacher")
	}
	defer results.Close()

	var resultSlice []*Teacher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Teacher")
	}

	if len(teachAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Teacher = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Teacher == foreign.ID {
				local.R.Teacher = foreign
				break
			}
		}
	}

	return nil
}

// LoadClass allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (teachL) LoadClass(e boil.Executor, singular bool, maybeTeach interface{}) error {
	var slice []*Teach
	var object *Teach

	count := 1
	if singular {
		object = maybeTeach.(*Teach)
	} else {
		slice = *maybeTeach.(*[]*Teach)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &teachR{}
		}
		args[0] = object.Class
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &teachR{}
			}
			args[i] = obj.Class
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"classes\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Class")
	}
	defer results.Close()

	var resultSlice []*Class
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Class")
	}

	if len(teachAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Class = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Class == foreign.ID {
				local.R.Class = foreign
				break
			}
		}
	}

	return nil
}

// SetSubjectG of the teach to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.Teaches.
// Uses the global database handle.
func (o *Teach) SetSubjectG(insert bool, related *Subject) error {
	return o.SetSubject(boil.GetDB(), insert, related)
}

// SetSubjectP of the teach to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.Teaches.
// Panics on error.
func (o *Teach) SetSubjectP(exec boil.Executor, insert bool, related *Subject) {
	if err := o.SetSubject(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSubjectGP of the teach to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.Teaches.
// Uses the global database handle and panics on error.
func (o *Teach) SetSubjectGP(insert bool, related *Subject) {
	if err := o.SetSubject(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSubject of the teach to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.Teaches.
func (o *Teach) SetSubject(exec boil.Executor, insert bool, related *Subject) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"back2school\".\"teaches\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject"}),
		strmangle.WhereClause("\"", "\"", 2, teachPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Teacher, o.Subject, o.Class}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Subject = related.ID

	if o.R == nil {
		o.R = &teachR{
			Subject: related,
		}
	} else {
		o.R.Subject = related
	}

	if related.R == nil {
		related.R = &subjectR{
			Teaches: TeachSlice{o},
		}
	} else {
		related.R.Teaches = append(related.R.Teaches, o)
	}

	return nil
}

// SetTeacherG of the teach to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Teaches.
// Uses the global database handle.
func (o *Teach) SetTeacherG(insert bool, related *Teacher) error {
	return o.SetTeacher(boil.GetDB(), insert, related)
}

// SetTeacherP of the teach to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Teaches.
// Panics on error.
func (o *Teach) SetTeacherP(exec boil.Executor, insert bool, related *Teacher) {
	if err := o.SetTeacher(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTeacherGP of the teach to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Teaches.
// Uses the global database handle and panics on error.
func (o *Teach) SetTeacherGP(insert bool, related *Teacher) {
	if err := o.SetTeacher(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTeacher of the teach to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Teaches.
func (o *Teach) SetTeacher(exec boil.Executor, insert bool, related *Teacher) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"back2school\".\"teaches\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"teacher"}),
		strmangle.WhereClause("\"", "\"", 2, teachPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Teacher, o.Subject, o.Class}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Teacher = related.ID

	if o.R == nil {
		o.R = &teachR{
			Teacher: related,
		}
	} else {
		o.R.Teacher = related
	}

	if related.R == nil {
		related.R = &teacherR{
			Teaches: TeachSlice{o},
		}
	} else {
		related.R.Teaches = append(related.R.Teaches, o)
	}

	return nil
}

// SetClassG of the teach to the related item.
// Sets o.R.Class to related.
// Adds o to related.R.Teaches.
// Uses the global database handle.
func (o *Teach) SetClassG(insert bool, related *Class) error {
	return o.SetClass(boil.GetDB(), insert, related)
}

// SetClassP of the teach to the related item.
// Sets o.R.Class to related.
// Adds o to related.R.Teaches.
// Panics on error.
func (o *Teach) SetClassP(exec boil.Executor, insert bool, related *Class) {
	if err := o.SetClass(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClassGP of the teach to the related item.
// Sets o.R.Class to related.
// Adds o to related.R.Teaches.
// Uses the global database handle and panics on error.
func (o *Teach) SetClassGP(insert bool, related *Class) {
	if err := o.SetClass(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClass of the teach to the related item.
// Sets o.R.Class to related.
// Adds o to related.R.Teaches.
func (o *Teach) SetClass(exec boil.Executor, insert bool, related *Class) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"back2school\".\"teaches\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"class"}),
		strmangle.WhereClause("\"", "\"", 2, teachPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Teacher, o.Subject, o.Class}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Class = related.ID

	if o.R == nil {
		o.R = &teachR{
			Class: related,
		}
	} else {
		o.R.Class = related
	}

	if related.R == nil {
		related.R = &classR{
			Teaches: TeachSlice{o},
		}
	} else {
		related.R.Teaches = append(related.R.Teaches, o)
	}

	return nil
}

// TeachesG retrieves all records.
func TeachesG(mods ...qm.QueryMod) teachQuery {
	return Teaches(boil.GetDB(), mods...)
}

// Teaches retrieves all the records using an executor.
func Teaches(exec boil.Executor, mods ...qm.QueryMod) teachQuery {
	mods = append(mods, qm.From("\"back2school\".\"teaches\""))
	return teachQuery{NewQuery(exec, mods...)}
}

// FindTeachG retrieves a single record by ID.
func FindTeachG(teacher int, subject string, class int, selectCols ...string) (*Teach, error) {
	return FindTeach(boil.GetDB(), teacher, subject, class, selectCols...)
}

// FindTeachGP retrieves a single record by ID, and panics on error.
func FindTeachGP(teacher int, subject string, class int, selectCols ...string) *Teach {
	retobj, err := FindTeach(boil.GetDB(), teacher, subject, class, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTeach retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeach(exec boil.Executor, teacher int, subject string, class int, selectCols ...string) (*Teach, error) {
	teachObj := &Teach{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"back2school\".\"teaches\" where \"teacher\"=$1 AND \"subject\"=$2 AND \"class\"=$3", sel,
	)

	q := queries.Raw(exec, query, teacher, subject, class)

	err := q.Bind(teachObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from teaches")
	}

	return teachObj, nil
}

// FindTeachP retrieves a single record by ID with an executor, and panics on error.
func FindTeachP(exec boil.Executor, teacher int, subject string, class int, selectCols ...string) *Teach {
	retobj, err := FindTeach(exec, teacher, subject, class, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Teach) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Teach) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Teach) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Teach) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no teaches provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teachColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	teachInsertCacheMut.RLock()
	cache, cached := teachInsertCache[key]
	teachInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			teachColumns,
			teachColumnsWithDefault,
			teachColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(teachType, teachMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teachType, teachMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"back2school\".\"teaches\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"back2school\".\"teaches\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into teaches")
	}

	if !cached {
		teachInsertCacheMut.Lock()
		teachInsertCache[key] = cache
		teachInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Teach record. See Update for
// whitelist behavior description.
func (o *Teach) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Teach record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Teach) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Teach, and panics on error.
// See Update for whitelist behavior description.
func (o *Teach) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Teach.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Teach) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	teachUpdateCacheMut.RLock()
	cache, cached := teachUpdateCache[key]
	teachUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			teachColumns,
			teachPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update teaches, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"back2school\".\"teaches\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, teachPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teachType, teachMapping, append(wl, teachPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update teaches row")
	}

	if !cached {
		teachUpdateCacheMut.Lock()
		teachUpdateCache[key] = cache
		teachUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q teachQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q teachQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for teaches")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TeachSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TeachSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TeachSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeachSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teachPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"back2school\".\"teaches\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, teachPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in teach slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Teach) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Teach) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Teach) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Teach) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no teaches provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teachColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teachUpsertCacheMut.RLock()
	cache, cached := teachUpsertCache[key]
	teachUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			teachColumns,
			teachColumnsWithDefault,
			teachColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			teachColumns,
			teachPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert teaches, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(teachPrimaryKeyColumns))
			copy(conflict, teachPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"back2school\".\"teaches\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(teachType, teachMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teachType, teachMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert teaches")
	}

	if !cached {
		teachUpsertCacheMut.Lock()
		teachUpsertCache[key] = cache
		teachUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Teach record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Teach) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Teach record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Teach) DeleteG() error {
	if o == nil {
		return errors.New("models: no Teach provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Teach record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Teach) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Teach record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Teach) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Teach provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teachPrimaryKeyMapping)
	sql := "DELETE FROM \"back2school\".\"teaches\" WHERE \"teacher\"=$1 AND \"subject\"=$2 AND \"class\"=$3"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from teaches")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q teachQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q teachQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no teachQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from teaches")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TeachSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TeachSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Teach slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TeachSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeachSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Teach slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(teachBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teachPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"back2school\".\"teaches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teachPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from teach slice")
	}

	if len(teachAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Teach) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Teach) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Teach) ReloadG() error {
	if o == nil {
		return errors.New("models: no Teach provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Teach) Reload(exec boil.Executor) error {
	ret, err := FindTeach(exec, o.Teacher, o.Subject, o.Class)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TeachSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TeachSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeachSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TeachSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeachSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	teaches := TeachSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teachPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"back2school\".\"teaches\".* FROM \"back2school\".\"teaches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teachPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&teaches)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TeachSlice")
	}

	*o = teaches

	return nil
}

// TeachExists checks if the Teach row exists.
func TeachExists(exec boil.Executor, teacher int, subject string, class int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"back2school\".\"teaches\" where \"teacher\"=$1 AND \"subject\"=$2 AND \"class\"=$3 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, teacher, subject, class)
	}

	row := exec.QueryRow(sql, teacher, subject, class)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if teaches exists")
	}

	return exists, nil
}

// TeachExistsG checks if the Teach row exists.
func TeachExistsG(teacher int, subject string, class int) (bool, error) {
	return TeachExists(boil.GetDB(), teacher, subject, class)
}

// TeachExistsGP checks if the Teach row exists. Panics on error.
func TeachExistsGP(teacher int, subject string, class int) bool {
	e, err := TeachExists(boil.GetDB(), teacher, subject, class)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TeachExistsP checks if the Teach row exists. Panics on error.
func TeachExistsP(exec boil.Executor, teacher int, subject string, class int) bool {
	e, err := TeachExists(exec, teacher, subject, class)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
