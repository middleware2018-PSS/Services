// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testAppointments(t *testing.T) {
	t.Parallel()

	query := Appointments(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testAppointmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = appointment.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Appointments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppointmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Appointments(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Appointments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppointmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AppointmentSlice{appointment}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Appointments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testAppointmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AppointmentExists(tx, appointment.ID)
	if err != nil {
		t.Errorf("Unable to check if Appointment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AppointmentExistsG to return true, but got false.")
	}
}
func testAppointmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	appointmentFound, err := FindAppointment(tx, appointment.ID)
	if err != nil {
		t.Error(err)
	}

	if appointmentFound == nil {
		t.Error("want a record, got nil")
	}
}
func testAppointmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Appointments(tx).Bind(appointment); err != nil {
		t.Error(err)
	}
}

func testAppointmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Appointments(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAppointmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointmentOne := &Appointment{}
	appointmentTwo := &Appointment{}
	if err = randomize.Struct(seed, appointmentOne, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}
	if err = randomize.Struct(seed, appointmentTwo, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointmentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = appointmentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Appointments(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAppointmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	appointmentOne := &Appointment{}
	appointmentTwo := &Appointment{}
	if err = randomize.Struct(seed, appointmentOne, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}
	if err = randomize.Struct(seed, appointmentTwo, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointmentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = appointmentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Appointments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func appointmentBeforeInsertHook(e boil.Executor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentAfterInsertHook(e boil.Executor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentAfterSelectHook(e boil.Executor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentBeforeUpdateHook(e boil.Executor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentAfterUpdateHook(e boil.Executor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentBeforeDeleteHook(e boil.Executor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentAfterDeleteHook(e boil.Executor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentBeforeUpsertHook(e boil.Executor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentAfterUpsertHook(e boil.Executor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func testAppointmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Appointment{}
	o := &Appointment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, appointmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Appointment object: %s", err)
	}

	AddAppointmentHook(boil.BeforeInsertHook, appointmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	appointmentBeforeInsertHooks = []AppointmentHook{}

	AddAppointmentHook(boil.AfterInsertHook, appointmentAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	appointmentAfterInsertHooks = []AppointmentHook{}

	AddAppointmentHook(boil.AfterSelectHook, appointmentAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	appointmentAfterSelectHooks = []AppointmentHook{}

	AddAppointmentHook(boil.BeforeUpdateHook, appointmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	appointmentBeforeUpdateHooks = []AppointmentHook{}

	AddAppointmentHook(boil.AfterUpdateHook, appointmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	appointmentAfterUpdateHooks = []AppointmentHook{}

	AddAppointmentHook(boil.BeforeDeleteHook, appointmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	appointmentBeforeDeleteHooks = []AppointmentHook{}

	AddAppointmentHook(boil.AfterDeleteHook, appointmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	appointmentAfterDeleteHooks = []AppointmentHook{}

	AddAppointmentHook(boil.BeforeUpsertHook, appointmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	appointmentBeforeUpsertHooks = []AppointmentHook{}

	AddAppointmentHook(boil.AfterUpsertHook, appointmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	appointmentAfterUpsertHooks = []AppointmentHook{}
}
func testAppointmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Appointments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppointmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx, appointmentColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Appointments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppointmentToOneStudentUsingStudent(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Appointment
	var foreign Student

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, studentDBTypes, false, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Student = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Student(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AppointmentSlice{&local}
	if err = local.L.LoadStudent(tx, false, (*[]*Appointment)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Student == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Student = nil
	if err = local.L.LoadStudent(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Student == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAppointmentToOneTeacherUsingTeacher(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Appointment
	var foreign Teacher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teacherDBTypes, false, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Teacher = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Teacher(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AppointmentSlice{&local}
	if err = local.L.LoadTeacher(tx, false, (*[]*Appointment)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Teacher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Teacher = nil
	if err = local.L.LoadTeacher(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Teacher == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAppointmentToOneSetOpStudentUsingStudent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Appointment
	var b, c Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Student{&b, &c} {
		err = a.SetStudent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Student != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Appointments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Student != x.ID {
			t.Error("foreign key was wrong value", a.Student)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Student))
		reflect.Indirect(reflect.ValueOf(&a.Student)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Student != x.ID {
			t.Error("foreign key was wrong value", a.Student, x.ID)
		}
	}
}
func testAppointmentToOneSetOpTeacherUsingTeacher(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Appointment
	var b, c Teacher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teacherDBTypes, false, strmangle.SetComplement(teacherPrimaryKeyColumns, teacherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teacherDBTypes, false, strmangle.SetComplement(teacherPrimaryKeyColumns, teacherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Teacher{&b, &c} {
		err = a.SetTeacher(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Teacher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Appointments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Teacher != x.ID {
			t.Error("foreign key was wrong value", a.Teacher)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Teacher))
		reflect.Indirect(reflect.ValueOf(&a.Teacher)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Teacher != x.ID {
			t.Error("foreign key was wrong value", a.Teacher, x.ID)
		}
	}
}
func testAppointmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = appointment.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAppointmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AppointmentSlice{appointment}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testAppointmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Appointments(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	appointmentDBTypes = map[string]string{`ID`: `integer`, `Location`: `text`, `Student`: `integer`, `Teacher`: `integer`, `Time`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testAppointmentsUpdate(t *testing.T) {
	t.Parallel()

	if len(appointmentColumns) == len(appointmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Appointments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	if err = appointment.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAppointmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(appointmentColumns) == len(appointmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	appointment := &Appointment{}
	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Appointments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, appointment, appointmentDBTypes, true, appointmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(appointmentColumns, appointmentPrimaryKeyColumns) {
		fields = appointmentColumns
	} else {
		fields = strmangle.SetComplement(
			appointmentColumns,
			appointmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(appointment))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AppointmentSlice{appointment}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testAppointmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(appointmentColumns) == len(appointmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	appointment := Appointment{}
	if err = randomize.Struct(seed, &appointment, appointmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = appointment.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Appointment: %s", err)
	}

	count, err := Appointments(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &appointment, appointmentDBTypes, false, appointmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	if err = appointment.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Appointment: %s", err)
	}

	count, err = Appointments(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
