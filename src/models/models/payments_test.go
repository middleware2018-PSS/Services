// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPayments(t *testing.T) {
	t.Parallel()

	query := Payments(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPaymentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = payment.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Payments(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PaymentSlice{payment}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPaymentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PaymentExists(tx, payment.ID)
	if err != nil {
		t.Errorf("Unable to check if Payment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PaymentExistsG to return true, but got false.")
	}
}
func testPaymentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	paymentFound, err := FindPayment(tx, payment.ID)
	if err != nil {
		t.Error(err)
	}

	if paymentFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPaymentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Payments(tx).Bind(payment); err != nil {
		t.Error(err)
	}
}

func testPaymentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Payments(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPaymentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	paymentOne := &Payment{}
	paymentTwo := &Payment{}
	if err = randomize.Struct(seed, paymentOne, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err = randomize.Struct(seed, paymentTwo, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = paymentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = paymentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Payments(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPaymentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	paymentOne := &Payment{}
	paymentTwo := &Payment{}
	if err = randomize.Struct(seed, paymentOne, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err = randomize.Struct(seed, paymentTwo, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = paymentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = paymentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func paymentBeforeInsertHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterInsertHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterSelectHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentBeforeUpdateHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterUpdateHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentBeforeDeleteHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterDeleteHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentBeforeUpsertHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterUpsertHook(e boil.Executor, o *Payment) error {
	*o = Payment{}
	return nil
}

func testPaymentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Payment{}
	o := &Payment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, paymentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Payment object: %s", err)
	}

	AddPaymentHook(boil.BeforeInsertHook, paymentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	paymentBeforeInsertHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterInsertHook, paymentAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	paymentAfterInsertHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterSelectHook, paymentAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	paymentAfterSelectHooks = []PaymentHook{}

	AddPaymentHook(boil.BeforeUpdateHook, paymentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	paymentBeforeUpdateHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterUpdateHook, paymentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	paymentAfterUpdateHooks = []PaymentHook{}

	AddPaymentHook(boil.BeforeDeleteHook, paymentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	paymentBeforeDeleteHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterDeleteHook, paymentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	paymentAfterDeleteHooks = []PaymentHook{}

	AddPaymentHook(boil.BeforeUpsertHook, paymentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	paymentBeforeUpsertHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterUpsertHook, paymentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	paymentAfterUpsertHooks = []PaymentHook{}
}
func testPaymentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPaymentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx, paymentColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPaymentToOneStudentUsingStudent(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Payment
	var foreign Student

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, studentDBTypes, false, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	local.Student.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Student.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Student(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PaymentSlice{&local}
	if err = local.L.LoadStudent(tx, false, (*[]*Payment)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Student == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Student = nil
	if err = local.L.LoadStudent(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Student == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPaymentToOneSetOpStudentUsingStudent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Payment
	var b, c Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Student{&b, &c} {
		err = a.SetStudent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Student != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Payments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Student.Int != x.ID {
			t.Error("foreign key was wrong value", a.Student.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Student.Int))
		reflect.Indirect(reflect.ValueOf(&a.Student.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Student.Int != x.ID {
			t.Error("foreign key was wrong value", a.Student.Int, x.ID)
		}
	}
}

func testPaymentToOneRemoveOpStudentUsingStudent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Payment
	var b Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetStudent(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveStudent(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Student(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Student != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Student.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Payments) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPaymentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = payment.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPaymentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PaymentSlice{payment}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPaymentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Payments(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	paymentDBTypes = map[string]string{`Amount`: `integer`, `Emitted`: `timestamp without time zone`, `ID`: `integer`, `Payed`: `boolean`, `Reason`: `text`, `Student`: `integer`}
	_              = bytes.MinRead
)

func testPaymentsUpdate(t *testing.T) {
	t.Parallel()

	if len(paymentColumns) == len(paymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	if err = payment.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPaymentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(paymentColumns) == len(paymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	payment := &Payment{}
	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, payment, paymentDBTypes, true, paymentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(paymentColumns, paymentPrimaryKeyColumns) {
		fields = paymentColumns
	} else {
		fields = strmangle.SetComplement(
			paymentColumns,
			paymentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(payment))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PaymentSlice{payment}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPaymentsUpsert(t *testing.T) {
	t.Parallel()

	if len(paymentColumns) == len(paymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	payment := Payment{}
	if err = randomize.Struct(seed, &payment, paymentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = payment.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Payment: %s", err)
	}

	count, err := Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &payment, paymentDBTypes, false, paymentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	if err = payment.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Payment: %s", err)
	}

	count, err = Payments(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
