// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testGrades(t *testing.T) {
	t.Parallel()

	query := Grades(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testGradesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = grade.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Grades(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGradesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Grades(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Grades(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGradesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GradeSlice{grade}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Grades(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testGradesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := GradeExists(tx, grade.ID)
	if err != nil {
		t.Errorf("Unable to check if Grade exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GradeExistsG to return true, but got false.")
	}
}
func testGradesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	gradeFound, err := FindGrade(tx, grade.ID)
	if err != nil {
		t.Error(err)
	}

	if gradeFound == nil {
		t.Error("want a record, got nil")
	}
}
func testGradesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Grades(tx).Bind(grade); err != nil {
		t.Error(err)
	}
}

func testGradesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Grades(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGradesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gradeOne := &Grade{}
	gradeTwo := &Grade{}
	if err = randomize.Struct(seed, gradeOne, gradeDBTypes, false, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}
	if err = randomize.Struct(seed, gradeTwo, gradeDBTypes, false, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gradeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = gradeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Grades(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGradesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gradeOne := &Grade{}
	gradeTwo := &Grade{}
	if err = randomize.Struct(seed, gradeOne, gradeDBTypes, false, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}
	if err = randomize.Struct(seed, gradeTwo, gradeDBTypes, false, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gradeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = gradeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Grades(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func gradeBeforeInsertHook(e boil.Executor, o *Grade) error {
	*o = Grade{}
	return nil
}

func gradeAfterInsertHook(e boil.Executor, o *Grade) error {
	*o = Grade{}
	return nil
}

func gradeAfterSelectHook(e boil.Executor, o *Grade) error {
	*o = Grade{}
	return nil
}

func gradeBeforeUpdateHook(e boil.Executor, o *Grade) error {
	*o = Grade{}
	return nil
}

func gradeAfterUpdateHook(e boil.Executor, o *Grade) error {
	*o = Grade{}
	return nil
}

func gradeBeforeDeleteHook(e boil.Executor, o *Grade) error {
	*o = Grade{}
	return nil
}

func gradeAfterDeleteHook(e boil.Executor, o *Grade) error {
	*o = Grade{}
	return nil
}

func gradeBeforeUpsertHook(e boil.Executor, o *Grade) error {
	*o = Grade{}
	return nil
}

func gradeAfterUpsertHook(e boil.Executor, o *Grade) error {
	*o = Grade{}
	return nil
}

func testGradesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Grade{}
	o := &Grade{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gradeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Grade object: %s", err)
	}

	AddGradeHook(boil.BeforeInsertHook, gradeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gradeBeforeInsertHooks = []GradeHook{}

	AddGradeHook(boil.AfterInsertHook, gradeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gradeAfterInsertHooks = []GradeHook{}

	AddGradeHook(boil.AfterSelectHook, gradeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gradeAfterSelectHooks = []GradeHook{}

	AddGradeHook(boil.BeforeUpdateHook, gradeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gradeBeforeUpdateHooks = []GradeHook{}

	AddGradeHook(boil.AfterUpdateHook, gradeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gradeAfterUpdateHooks = []GradeHook{}

	AddGradeHook(boil.BeforeDeleteHook, gradeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gradeBeforeDeleteHooks = []GradeHook{}

	AddGradeHook(boil.AfterDeleteHook, gradeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gradeAfterDeleteHooks = []GradeHook{}

	AddGradeHook(boil.BeforeUpsertHook, gradeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gradeBeforeUpsertHooks = []GradeHook{}

	AddGradeHook(boil.AfterUpsertHook, gradeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gradeAfterUpsertHooks = []GradeHook{}
}
func testGradesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Grades(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGradesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx, gradeColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Grades(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGradeToOneTeacherUsingTeacher(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Grade
	var foreign Teacher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gradeDBTypes, false, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teacherDBTypes, false, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Teacher = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Teacher(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GradeSlice{&local}
	if err = local.L.LoadTeacher(tx, false, (*[]*Grade)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Teacher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Teacher = nil
	if err = local.L.LoadTeacher(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Teacher == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGradeToOneStudentUsingStudent(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Grade
	var foreign Student

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, studentDBTypes, false, studentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Student struct: %s", err)
	}

	local.Student.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Student.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Student(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GradeSlice{&local}
	if err = local.L.LoadStudent(tx, false, (*[]*Grade)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Student == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Student = nil
	if err = local.L.LoadStudent(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Student == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGradeToOneSetOpTeacherUsingTeacher(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Grade
	var b, c Teacher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gradeDBTypes, false, strmangle.SetComplement(gradePrimaryKeyColumns, gradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teacherDBTypes, false, strmangle.SetComplement(teacherPrimaryKeyColumns, teacherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teacherDBTypes, false, strmangle.SetComplement(teacherPrimaryKeyColumns, teacherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Teacher{&b, &c} {
		err = a.SetTeacher(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Teacher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Grades[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Teacher != x.ID {
			t.Error("foreign key was wrong value", a.Teacher)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Teacher))
		reflect.Indirect(reflect.ValueOf(&a.Teacher)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Teacher != x.ID {
			t.Error("foreign key was wrong value", a.Teacher, x.ID)
		}
	}
}
func testGradeToOneSetOpStudentUsingStudent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Grade
	var b, c Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gradeDBTypes, false, strmangle.SetComplement(gradePrimaryKeyColumns, gradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Student{&b, &c} {
		err = a.SetStudent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Student != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Grades[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Student.Int != x.ID {
			t.Error("foreign key was wrong value", a.Student.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Student.Int))
		reflect.Indirect(reflect.ValueOf(&a.Student.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Student.Int != x.ID {
			t.Error("foreign key was wrong value", a.Student.Int, x.ID)
		}
	}
}

func testGradeToOneRemoveOpStudentUsingStudent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Grade
	var b Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gradeDBTypes, false, strmangle.SetComplement(gradePrimaryKeyColumns, gradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetStudent(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveStudent(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Student(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Student != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Student.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Grades) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGradesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = grade.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGradesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GradeSlice{grade}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testGradesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Grades(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gradeDBTypes = map[string]string{`Date`: `timestamp without time zone`, `Grade`: `integer`, `ID`: `integer`, `Student`: `integer`, `Subject`: `text`, `Teacher`: `integer`}
	_            = bytes.MinRead
)

func testGradesUpdate(t *testing.T) {
	t.Parallel()

	if len(gradeColumns) == len(gradePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Grades(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	if err = grade.Update(tx); err != nil {
		t.Error(err)
	}
}

func testGradesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gradeColumns) == len(gradePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	grade := &Grade{}
	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Grades(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, grade, gradeDBTypes, true, gradePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gradeColumns, gradePrimaryKeyColumns) {
		fields = gradeColumns
	} else {
		fields = strmangle.SetComplement(
			gradeColumns,
			gradePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(grade))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := GradeSlice{grade}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testGradesUpsert(t *testing.T) {
	t.Parallel()

	if len(gradeColumns) == len(gradePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	grade := Grade{}
	if err = randomize.Struct(seed, &grade, gradeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = grade.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Grade: %s", err)
	}

	count, err := Grades(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &grade, gradeDBTypes, false, gradePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Grade struct: %s", err)
	}

	if err = grade.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Grade: %s", err)
	}

	count, err = Grades(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
