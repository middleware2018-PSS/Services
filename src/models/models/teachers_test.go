// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTeachers(t *testing.T) {
	t.Parallel()

	query := Teachers(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTeachersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = teacher.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Teachers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeachersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Teachers(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Teachers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeachersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TeacherSlice{teacher}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Teachers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTeachersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TeacherExists(tx, teacher.ID)
	if err != nil {
		t.Errorf("Unable to check if Teacher exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TeacherExistsG to return true, but got false.")
	}
}
func testTeachersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	teacherFound, err := FindTeacher(tx, teacher.ID)
	if err != nil {
		t.Error(err)
	}

	if teacherFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTeachersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Teachers(tx).Bind(teacher); err != nil {
		t.Error(err)
	}
}

func testTeachersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Teachers(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTeachersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacherOne := &Teacher{}
	teacherTwo := &Teacher{}
	if err = randomize.Struct(seed, teacherOne, teacherDBTypes, false, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}
	if err = randomize.Struct(seed, teacherTwo, teacherDBTypes, false, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacherOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = teacherTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Teachers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTeachersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	teacherOne := &Teacher{}
	teacherTwo := &Teacher{}
	if err = randomize.Struct(seed, teacherOne, teacherDBTypes, false, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}
	if err = randomize.Struct(seed, teacherTwo, teacherDBTypes, false, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacherOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = teacherTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Teachers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func teacherBeforeInsertHook(e boil.Executor, o *Teacher) error {
	*o = Teacher{}
	return nil
}

func teacherAfterInsertHook(e boil.Executor, o *Teacher) error {
	*o = Teacher{}
	return nil
}

func teacherAfterSelectHook(e boil.Executor, o *Teacher) error {
	*o = Teacher{}
	return nil
}

func teacherBeforeUpdateHook(e boil.Executor, o *Teacher) error {
	*o = Teacher{}
	return nil
}

func teacherAfterUpdateHook(e boil.Executor, o *Teacher) error {
	*o = Teacher{}
	return nil
}

func teacherBeforeDeleteHook(e boil.Executor, o *Teacher) error {
	*o = Teacher{}
	return nil
}

func teacherAfterDeleteHook(e boil.Executor, o *Teacher) error {
	*o = Teacher{}
	return nil
}

func teacherBeforeUpsertHook(e boil.Executor, o *Teacher) error {
	*o = Teacher{}
	return nil
}

func teacherAfterUpsertHook(e boil.Executor, o *Teacher) error {
	*o = Teacher{}
	return nil
}

func testTeachersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Teacher{}
	o := &Teacher{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, teacherDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Teacher object: %s", err)
	}

	AddTeacherHook(boil.BeforeInsertHook, teacherBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	teacherBeforeInsertHooks = []TeacherHook{}

	AddTeacherHook(boil.AfterInsertHook, teacherAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	teacherAfterInsertHooks = []TeacherHook{}

	AddTeacherHook(boil.AfterSelectHook, teacherAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	teacherAfterSelectHooks = []TeacherHook{}

	AddTeacherHook(boil.BeforeUpdateHook, teacherBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	teacherBeforeUpdateHooks = []TeacherHook{}

	AddTeacherHook(boil.AfterUpdateHook, teacherAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	teacherAfterUpdateHooks = []TeacherHook{}

	AddTeacherHook(boil.BeforeDeleteHook, teacherBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	teacherBeforeDeleteHooks = []TeacherHook{}

	AddTeacherHook(boil.AfterDeleteHook, teacherAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	teacherAfterDeleteHooks = []TeacherHook{}

	AddTeacherHook(boil.BeforeUpsertHook, teacherBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	teacherBeforeUpsertHooks = []TeacherHook{}

	AddTeacherHook(boil.AfterUpsertHook, teacherAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	teacherAfterUpsertHooks = []TeacherHook{}
}
func testTeachersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Teachers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeachersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx, teacherColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Teachers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeacherToManyAppointments(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Teacher
	var b, c Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, appointmentDBTypes, false, appointmentColumnsWithDefault...)
	randomize.Struct(seed, &c, appointmentDBTypes, false, appointmentColumnsWithDefault...)

	b.Teacher = a.ID
	c.Teacher = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	appointment, err := a.Appointments(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range appointment {
		if v.Teacher == b.Teacher {
			bFound = true
		}
		if v.Teacher == c.Teacher {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeacherSlice{&a}
	if err = a.L.LoadAppointments(tx, false, (*[]*Teacher)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Appointments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Appointments = nil
	if err = a.L.LoadAppointments(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Appointments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", appointment)
	}
}

func testTeacherToManyGrades(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Teacher
	var b, c Grade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, gradeDBTypes, false, gradeColumnsWithDefault...)
	randomize.Struct(seed, &c, gradeDBTypes, false, gradeColumnsWithDefault...)

	b.Teacher = a.ID
	c.Teacher = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	grade, err := a.Grades(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range grade {
		if v.Teacher == b.Teacher {
			bFound = true
		}
		if v.Teacher == c.Teacher {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeacherSlice{&a}
	if err = a.L.LoadGrades(tx, false, (*[]*Teacher)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Grades); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Grades = nil
	if err = a.L.LoadGrades(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Grades); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", grade)
	}
}

func testTeacherToManyTeaches(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Teacher
	var b, c Teach

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, teachDBTypes, false, teachColumnsWithDefault...)
	randomize.Struct(seed, &c, teachDBTypes, false, teachColumnsWithDefault...)

	b.Teacher = a.ID
	c.Teacher = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	teach, err := a.Teaches(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range teach {
		if v.Teacher == b.Teacher {
			bFound = true
		}
		if v.Teacher == c.Teacher {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeacherSlice{&a}
	if err = a.L.LoadTeaches(tx, false, (*[]*Teacher)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Teaches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Teaches = nil
	if err = a.L.LoadTeaches(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Teaches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", teach)
	}
}

func testTeacherToManyAddOpAppointments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Teacher
	var b, c, d, e Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teacherDBTypes, false, strmangle.SetComplement(teacherPrimaryKeyColumns, teacherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Appointment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Appointment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAppointments(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Teacher {
			t.Error("foreign key was wrong value", a.ID, first.Teacher)
		}
		if a.ID != second.Teacher {
			t.Error("foreign key was wrong value", a.ID, second.Teacher)
		}

		if first.R.Teacher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Teacher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Appointments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Appointments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Appointments(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTeacherToManyAddOpGrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Teacher
	var b, c, d, e Grade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teacherDBTypes, false, strmangle.SetComplement(teacherPrimaryKeyColumns, teacherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Grade{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gradeDBTypes, false, strmangle.SetComplement(gradePrimaryKeyColumns, gradeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Grade{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGrades(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Teacher {
			t.Error("foreign key was wrong value", a.ID, first.Teacher)
		}
		if a.ID != second.Teacher {
			t.Error("foreign key was wrong value", a.ID, second.Teacher)
		}

		if first.R.Teacher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Teacher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Grades[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Grades[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Grades(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTeacherToManyAddOpTeaches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Teacher
	var b, c, d, e Teach

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teacherDBTypes, false, strmangle.SetComplement(teacherPrimaryKeyColumns, teacherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Teach{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teachDBTypes, false, strmangle.SetComplement(teachPrimaryKeyColumns, teachColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Teach{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeaches(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Teacher {
			t.Error("foreign key was wrong value", a.ID, first.Teacher)
		}
		if a.ID != second.Teacher {
			t.Error("foreign key was wrong value", a.ID, second.Teacher)
		}

		if first.R.Teacher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Teacher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Teaches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Teaches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Teaches(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeachersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = teacher.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTeachersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TeacherSlice{teacher}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTeachersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Teachers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	teacherDBTypes = map[string]string{`ID`: `integer`, `Info`: `text`, `Mail`: `text`, `Name`: `text`, `Password`: `text`, `Surname`: `text`}
	_              = bytes.MinRead
)

func testTeachersUpdate(t *testing.T) {
	t.Parallel()

	if len(teacherColumns) == len(teacherPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Teachers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	if err = teacher.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTeachersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(teacherColumns) == len(teacherPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	teacher := &Teacher{}
	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Teachers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, teacher, teacherDBTypes, true, teacherPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(teacherColumns, teacherPrimaryKeyColumns) {
		fields = teacherColumns
	} else {
		fields = strmangle.SetComplement(
			teacherColumns,
			teacherPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(teacher))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TeacherSlice{teacher}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTeachersUpsert(t *testing.T) {
	t.Parallel()

	if len(teacherColumns) == len(teacherPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	teacher := Teacher{}
	if err = randomize.Struct(seed, &teacher, teacherDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = teacher.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Teacher: %s", err)
	}

	count, err := Teachers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &teacher, teacherDBTypes, false, teacherPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Teacher struct: %s", err)
	}

	if err = teacher.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Teacher: %s", err)
	}

	count, err = Teachers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
