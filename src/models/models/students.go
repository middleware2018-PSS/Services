// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Student is an object representing the database table.
type Student struct {
	ID      int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name    null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Surname null.String `boil:"surname" json:"surname,omitempty" toml:"surname" yaml:"surname,omitempty"`
	Mail    null.String `boil:"mail" json:"mail,omitempty" toml:"mail" yaml:"mail,omitempty"`
	Info    null.String `boil:"info" json:"info,omitempty" toml:"info" yaml:"info,omitempty"`

	R *studentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L studentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StudentColumns = struct {
	ID      string
	Name    string
	Surname string
	Mail    string
	Info    string
}{
	ID:      "id",
	Name:    "name",
	Surname: "surname",
	Mail:    "mail",
	Info:    "info",
}

// studentR is where relationships are stored.
type studentR struct {
	Appointments AppointmentSlice
	Classes      ClassSlice
	Grades       GradeSlice
	Parents      ParentSlice
	Payments     PaymentSlice
}

// studentL is where Load methods for each relationship are stored.
type studentL struct{}

var (
	studentColumns               = []string{"id", "name", "surname", "mail", "info"}
	studentColumnsWithoutDefault = []string{}
	studentColumnsWithDefault    = []string{"id", "name", "surname", "mail", "info"}
	studentPrimaryKeyColumns     = []string{"id"}
)

type (
	// StudentSlice is an alias for a slice of pointers to Student.
	// This should generally be used opposed to []Student.
	StudentSlice []*Student
	// StudentHook is the signature for custom Student hook methods
	StudentHook func(boil.Executor, *Student) error

	studentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	studentType                 = reflect.TypeOf(&Student{})
	studentMapping              = queries.MakeStructMapping(studentType)
	studentPrimaryKeyMapping, _ = queries.BindMapping(studentType, studentMapping, studentPrimaryKeyColumns)
	studentInsertCacheMut       sync.RWMutex
	studentInsertCache          = make(map[string]insertCache)
	studentUpdateCacheMut       sync.RWMutex
	studentUpdateCache          = make(map[string]updateCache)
	studentUpsertCacheMut       sync.RWMutex
	studentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var studentBeforeInsertHooks []StudentHook
var studentBeforeUpdateHooks []StudentHook
var studentBeforeDeleteHooks []StudentHook
var studentBeforeUpsertHooks []StudentHook

var studentAfterInsertHooks []StudentHook
var studentAfterSelectHooks []StudentHook
var studentAfterUpdateHooks []StudentHook
var studentAfterDeleteHooks []StudentHook
var studentAfterUpsertHooks []StudentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Student) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range studentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Student) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range studentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Student) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range studentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Student) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range studentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Student) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range studentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Student) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range studentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Student) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range studentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Student) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range studentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Student) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range studentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStudentHook registers your hook function for all future operations.
func AddStudentHook(hookPoint boil.HookPoint, studentHook StudentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		studentBeforeInsertHooks = append(studentBeforeInsertHooks, studentHook)
	case boil.BeforeUpdateHook:
		studentBeforeUpdateHooks = append(studentBeforeUpdateHooks, studentHook)
	case boil.BeforeDeleteHook:
		studentBeforeDeleteHooks = append(studentBeforeDeleteHooks, studentHook)
	case boil.BeforeUpsertHook:
		studentBeforeUpsertHooks = append(studentBeforeUpsertHooks, studentHook)
	case boil.AfterInsertHook:
		studentAfterInsertHooks = append(studentAfterInsertHooks, studentHook)
	case boil.AfterSelectHook:
		studentAfterSelectHooks = append(studentAfterSelectHooks, studentHook)
	case boil.AfterUpdateHook:
		studentAfterUpdateHooks = append(studentAfterUpdateHooks, studentHook)
	case boil.AfterDeleteHook:
		studentAfterDeleteHooks = append(studentAfterDeleteHooks, studentHook)
	case boil.AfterUpsertHook:
		studentAfterUpsertHooks = append(studentAfterUpsertHooks, studentHook)
	}
}

// OneP returns a single student record from the query, and panics on error.
func (q studentQuery) OneP() *Student {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single student record from the query.
func (q studentQuery) One() (*Student, error) {
	o := &Student{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for students")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Student records from the query, and panics on error.
func (q studentQuery) AllP() StudentSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Student records from the query.
func (q studentQuery) All() (StudentSlice, error) {
	var o []*Student

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Student slice")
	}

	if len(studentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Student records in the query, and panics on error.
func (q studentQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Student records in the query.
func (q studentQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count students rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q studentQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q studentQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if students exists")
	}

	return count > 0, nil
}

// AppointmentsG retrieves all the appointment's appointments.
func (o *Student) AppointmentsG(mods ...qm.QueryMod) appointmentQuery {
	return o.Appointments(boil.GetDB(), mods...)
}

// Appointments retrieves all the appointment's appointments with an executor.
func (o *Student) Appointments(exec boil.Executor, mods ...qm.QueryMod) appointmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"back2school\".\"appointments\".\"student\"=?", o.ID),
	)

	query := Appointments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"appointments\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"back2school\".\"appointments\".*"})
	}

	return query
}

// ClassesG retrieves all the class's classes.
func (o *Student) ClassesG(mods ...qm.QueryMod) classQuery {
	return o.Classes(boil.GetDB(), mods...)
}

// Classes retrieves all the class's classes with an executor.
func (o *Student) Classes(exec boil.Executor, mods ...qm.QueryMod) classQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"back2school\".\"enrolled\" on \"back2school\".\"classes\".\"id\" = \"back2school\".\"enrolled\".\"class\""),
		qm.Where("\"back2school\".\"enrolled\".\"student\"=?", o.ID),
	)

	query := Classes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"classes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"back2school\".\"classes\".*"})
	}

	return query
}

// GradesG retrieves all the grade's grades.
func (o *Student) GradesG(mods ...qm.QueryMod) gradeQuery {
	return o.Grades(boil.GetDB(), mods...)
}

// Grades retrieves all the grade's grades with an executor.
func (o *Student) Grades(exec boil.Executor, mods ...qm.QueryMod) gradeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"back2school\".\"grades\".\"student\"=?", o.ID),
	)

	query := Grades(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"grades\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"back2school\".\"grades\".*"})
	}

	return query
}

// ParentsG retrieves all the parent's parents.
func (o *Student) ParentsG(mods ...qm.QueryMod) parentQuery {
	return o.Parents(boil.GetDB(), mods...)
}

// Parents retrieves all the parent's parents with an executor.
func (o *Student) Parents(exec boil.Executor, mods ...qm.QueryMod) parentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"back2school\".\"isparent\" on \"back2school\".\"parents\".\"id\" = \"back2school\".\"isparent\".\"parent\""),
		qm.Where("\"back2school\".\"isparent\".\"student\"=?", o.ID),
	)

	query := Parents(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"parents\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"back2school\".\"parents\".*"})
	}

	return query
}

// PaymentsG retrieves all the payment's payments.
func (o *Student) PaymentsG(mods ...qm.QueryMod) paymentQuery {
	return o.Payments(boil.GetDB(), mods...)
}

// Payments retrieves all the payment's payments with an executor.
func (o *Student) Payments(exec boil.Executor, mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"back2school\".\"payments\".\"student\"=?", o.ID),
	)

	query := Payments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"payments\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"back2school\".\"payments\".*"})
	}

	return query
}

// LoadAppointments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (studentL) LoadAppointments(e boil.Executor, singular bool, maybeStudent interface{}) error {
	var slice []*Student
	var object *Student

	count := 1
	if singular {
		object = maybeStudent.(*Student)
	} else {
		slice = *maybeStudent.(*[]*Student)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &studentR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &studentR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"appointments\" where \"student\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load appointments")
	}
	defer results.Close()

	var resultSlice []*Appointment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice appointments")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Appointments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Student {
				local.R.Appointments = append(local.R.Appointments, foreign)
				break
			}
		}
	}

	return nil
}

// LoadClasses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (studentL) LoadClasses(e boil.Executor, singular bool, maybeStudent interface{}) error {
	var slice []*Student
	var object *Student

	count := 1
	if singular {
		object = maybeStudent.(*Student)
	} else {
		slice = *maybeStudent.(*[]*Student)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &studentR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &studentR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select \"a\".*, \"b\".\"student\" from \"back2school\".\"classes\" as \"a\" inner join \"back2school\".\"enrolled\" as \"b\" on \"a\".\"id\" = \"b\".\"class\" where \"b\".\"student\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load classes")
	}
	defer results.Close()

	var resultSlice []*Class

	var localJoinCols []int
	for results.Next() {
		one := new(Class)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Year, &one.Section, &one.Info, &one.Grade, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice classes")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice classes")
	}

	if len(classAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Classes = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Classes = append(local.R.Classes, foreign)
				break
			}
		}
	}

	return nil
}

// LoadGrades allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (studentL) LoadGrades(e boil.Executor, singular bool, maybeStudent interface{}) error {
	var slice []*Student
	var object *Student

	count := 1
	if singular {
		object = maybeStudent.(*Student)
	} else {
		slice = *maybeStudent.(*[]*Student)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &studentR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &studentR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"grades\" where \"student\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load grades")
	}
	defer results.Close()

	var resultSlice []*Grade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice grades")
	}

	if len(gradeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Grades = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Student.Int {
				local.R.Grades = append(local.R.Grades, foreign)
				break
			}
		}
	}

	return nil
}

// LoadParents allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (studentL) LoadParents(e boil.Executor, singular bool, maybeStudent interface{}) error {
	var slice []*Student
	var object *Student

	count := 1
	if singular {
		object = maybeStudent.(*Student)
	} else {
		slice = *maybeStudent.(*[]*Student)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &studentR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &studentR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select \"a\".*, \"b\".\"student\" from \"back2school\".\"parents\" as \"a\" inner join \"back2school\".\"isparent\" as \"b\" on \"a\".\"id\" = \"b\".\"parent\" where \"b\".\"student\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load parents")
	}
	defer results.Close()

	var resultSlice []*Parent

	var localJoinCols []int
	for results.Next() {
		one := new(Parent)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.Surname, &one.Mail, &one.Info, &one.Password, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice parents")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice parents")
	}

	if len(parentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Parents = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Parents = append(local.R.Parents, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPayments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (studentL) LoadPayments(e boil.Executor, singular bool, maybeStudent interface{}) error {
	var slice []*Student
	var object *Student

	count := 1
	if singular {
		object = maybeStudent.(*Student)
	} else {
		slice = *maybeStudent.(*[]*Student)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &studentR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &studentR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"payments\" where \"student\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payments")
	}
	defer results.Close()

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payments")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Payments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Student.Int {
				local.R.Payments = append(local.R.Payments, foreign)
				break
			}
		}
	}

	return nil
}

// AddAppointmentsG adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Appointments.
// Sets related.R.Student appropriately.
// Uses the global database handle.
func (o *Student) AddAppointmentsG(insert bool, related ...*Appointment) error {
	return o.AddAppointments(boil.GetDB(), insert, related...)
}

// AddAppointmentsP adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Appointments.
// Sets related.R.Student appropriately.
// Panics on error.
func (o *Student) AddAppointmentsP(exec boil.Executor, insert bool, related ...*Appointment) {
	if err := o.AddAppointments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAppointmentsGP adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Appointments.
// Sets related.R.Student appropriately.
// Uses the global database handle and panics on error.
func (o *Student) AddAppointmentsGP(insert bool, related ...*Appointment) {
	if err := o.AddAppointments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAppointments adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Appointments.
// Sets related.R.Student appropriately.
func (o *Student) AddAppointments(exec boil.Executor, insert bool, related ...*Appointment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Student = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"back2school\".\"appointments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"student"}),
				strmangle.WhereClause("\"", "\"", 2, appointmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Student = o.ID
		}
	}

	if o.R == nil {
		o.R = &studentR{
			Appointments: related,
		}
	} else {
		o.R.Appointments = append(o.R.Appointments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appointmentR{
				Student: o,
			}
		} else {
			rel.R.Student = o
		}
	}
	return nil
}

// AddClassesG adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Classes.
// Sets related.R.Students appropriately.
// Uses the global database handle.
func (o *Student) AddClassesG(insert bool, related ...*Class) error {
	return o.AddClasses(boil.GetDB(), insert, related...)
}

// AddClassesP adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Classes.
// Sets related.R.Students appropriately.
// Panics on error.
func (o *Student) AddClassesP(exec boil.Executor, insert bool, related ...*Class) {
	if err := o.AddClasses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddClassesGP adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Classes.
// Sets related.R.Students appropriately.
// Uses the global database handle and panics on error.
func (o *Student) AddClassesGP(insert bool, related ...*Class) {
	if err := o.AddClasses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddClasses adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Classes.
// Sets related.R.Students appropriately.
func (o *Student) AddClasses(exec boil.Executor, insert bool, related ...*Class) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"back2school\".\"enrolled\" (\"student\", \"class\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &studentR{
			Classes: related,
		}
	} else {
		o.R.Classes = append(o.R.Classes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &classR{
				Students: StudentSlice{o},
			}
		} else {
			rel.R.Students = append(rel.R.Students, o)
		}
	}
	return nil
}

// SetClassesG removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Students's Classes accordingly.
// Replaces o.R.Classes with related.
// Sets related.R.Students's Classes accordingly.
// Uses the global database handle.
func (o *Student) SetClassesG(insert bool, related ...*Class) error {
	return o.SetClasses(boil.GetDB(), insert, related...)
}

// SetClassesP removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Students's Classes accordingly.
// Replaces o.R.Classes with related.
// Sets related.R.Students's Classes accordingly.
// Panics on error.
func (o *Student) SetClassesP(exec boil.Executor, insert bool, related ...*Class) {
	if err := o.SetClasses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClassesGP removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Students's Classes accordingly.
// Replaces o.R.Classes with related.
// Sets related.R.Students's Classes accordingly.
// Uses the global database handle and panics on error.
func (o *Student) SetClassesGP(insert bool, related ...*Class) {
	if err := o.SetClasses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClasses removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Students's Classes accordingly.
// Replaces o.R.Classes with related.
// Sets related.R.Students's Classes accordingly.
func (o *Student) SetClasses(exec boil.Executor, insert bool, related ...*Class) error {
	query := "delete from \"back2school\".\"enrolled\" where \"student\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeClassesFromStudentsSlice(o, related)
	if o.R != nil {
		o.R.Classes = nil
	}
	return o.AddClasses(exec, insert, related...)
}

// RemoveClassesG relationships from objects passed in.
// Removes related items from R.Classes (uses pointer comparison, removal does not keep order)
// Sets related.R.Students.
// Uses the global database handle.
func (o *Student) RemoveClassesG(related ...*Class) error {
	return o.RemoveClasses(boil.GetDB(), related...)
}

// RemoveClassesP relationships from objects passed in.
// Removes related items from R.Classes (uses pointer comparison, removal does not keep order)
// Sets related.R.Students.
// Panics on error.
func (o *Student) RemoveClassesP(exec boil.Executor, related ...*Class) {
	if err := o.RemoveClasses(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveClassesGP relationships from objects passed in.
// Removes related items from R.Classes (uses pointer comparison, removal does not keep order)
// Sets related.R.Students.
// Uses the global database handle and panics on error.
func (o *Student) RemoveClassesGP(related ...*Class) {
	if err := o.RemoveClasses(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveClasses relationships from objects passed in.
// Removes related items from R.Classes (uses pointer comparison, removal does not keep order)
// Sets related.R.Students.
func (o *Student) RemoveClasses(exec boil.Executor, related ...*Class) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"back2school\".\"enrolled\" where \"student\" = $1 and \"class\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeClassesFromStudentsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Classes {
			if rel != ri {
				continue
			}

			ln := len(o.R.Classes)
			if ln > 1 && i < ln-1 {
				o.R.Classes[i] = o.R.Classes[ln-1]
			}
			o.R.Classes = o.R.Classes[:ln-1]
			break
		}
	}

	return nil
}

func removeClassesFromStudentsSlice(o *Student, related []*Class) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Students {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Students)
			if ln > 1 && i < ln-1 {
				rel.R.Students[i] = rel.R.Students[ln-1]
			}
			rel.R.Students = rel.R.Students[:ln-1]
			break
		}
	}
}

// AddGradesG adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Grades.
// Sets related.R.Student appropriately.
// Uses the global database handle.
func (o *Student) AddGradesG(insert bool, related ...*Grade) error {
	return o.AddGrades(boil.GetDB(), insert, related...)
}

// AddGradesP adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Grades.
// Sets related.R.Student appropriately.
// Panics on error.
func (o *Student) AddGradesP(exec boil.Executor, insert bool, related ...*Grade) {
	if err := o.AddGrades(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGradesGP adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Grades.
// Sets related.R.Student appropriately.
// Uses the global database handle and panics on error.
func (o *Student) AddGradesGP(insert bool, related ...*Grade) {
	if err := o.AddGrades(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGrades adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Grades.
// Sets related.R.Student appropriately.
func (o *Student) AddGrades(exec boil.Executor, insert bool, related ...*Grade) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Student.Int = o.ID
			rel.Student.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"back2school\".\"grades\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"student"}),
				strmangle.WhereClause("\"", "\"", 2, gradePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Student.Int = o.ID
			rel.Student.Valid = true
		}
	}

	if o.R == nil {
		o.R = &studentR{
			Grades: related,
		}
	} else {
		o.R.Grades = append(o.R.Grades, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gradeR{
				Student: o,
			}
		} else {
			rel.R.Student = o
		}
	}
	return nil
}

// SetGradesG removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Student's Grades accordingly.
// Replaces o.R.Grades with related.
// Sets related.R.Student's Grades accordingly.
// Uses the global database handle.
func (o *Student) SetGradesG(insert bool, related ...*Grade) error {
	return o.SetGrades(boil.GetDB(), insert, related...)
}

// SetGradesP removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Student's Grades accordingly.
// Replaces o.R.Grades with related.
// Sets related.R.Student's Grades accordingly.
// Panics on error.
func (o *Student) SetGradesP(exec boil.Executor, insert bool, related ...*Grade) {
	if err := o.SetGrades(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGradesGP removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Student's Grades accordingly.
// Replaces o.R.Grades with related.
// Sets related.R.Student's Grades accordingly.
// Uses the global database handle and panics on error.
func (o *Student) SetGradesGP(insert bool, related ...*Grade) {
	if err := o.SetGrades(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGrades removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Student's Grades accordingly.
// Replaces o.R.Grades with related.
// Sets related.R.Student's Grades accordingly.
func (o *Student) SetGrades(exec boil.Executor, insert bool, related ...*Grade) error {
	query := "update \"back2school\".\"grades\" set \"student\" = null where \"student\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Grades {
			rel.Student.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Student = nil
		}

		o.R.Grades = nil
	}
	return o.AddGrades(exec, insert, related...)
}

// RemoveGradesG relationships from objects passed in.
// Removes related items from R.Grades (uses pointer comparison, removal does not keep order)
// Sets related.R.Student.
// Uses the global database handle.
func (o *Student) RemoveGradesG(related ...*Grade) error {
	return o.RemoveGrades(boil.GetDB(), related...)
}

// RemoveGradesP relationships from objects passed in.
// Removes related items from R.Grades (uses pointer comparison, removal does not keep order)
// Sets related.R.Student.
// Panics on error.
func (o *Student) RemoveGradesP(exec boil.Executor, related ...*Grade) {
	if err := o.RemoveGrades(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveGradesGP relationships from objects passed in.
// Removes related items from R.Grades (uses pointer comparison, removal does not keep order)
// Sets related.R.Student.
// Uses the global database handle and panics on error.
func (o *Student) RemoveGradesGP(related ...*Grade) {
	if err := o.RemoveGrades(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveGrades relationships from objects passed in.
// Removes related items from R.Grades (uses pointer comparison, removal does not keep order)
// Sets related.R.Student.
func (o *Student) RemoveGrades(exec boil.Executor, related ...*Grade) error {
	var err error
	for _, rel := range related {
		rel.Student.Valid = false
		if rel.R != nil {
			rel.R.Student = nil
		}
		if err = rel.Update(exec, "student"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Grades {
			if rel != ri {
				continue
			}

			ln := len(o.R.Grades)
			if ln > 1 && i < ln-1 {
				o.R.Grades[i] = o.R.Grades[ln-1]
			}
			o.R.Grades = o.R.Grades[:ln-1]
			break
		}
	}

	return nil
}

// AddParentsG adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Parents.
// Sets related.R.Students appropriately.
// Uses the global database handle.
func (o *Student) AddParentsG(insert bool, related ...*Parent) error {
	return o.AddParents(boil.GetDB(), insert, related...)
}

// AddParentsP adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Parents.
// Sets related.R.Students appropriately.
// Panics on error.
func (o *Student) AddParentsP(exec boil.Executor, insert bool, related ...*Parent) {
	if err := o.AddParents(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentsGP adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Parents.
// Sets related.R.Students appropriately.
// Uses the global database handle and panics on error.
func (o *Student) AddParentsGP(insert bool, related ...*Parent) {
	if err := o.AddParents(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParents adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Parents.
// Sets related.R.Students appropriately.
func (o *Student) AddParents(exec boil.Executor, insert bool, related ...*Parent) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"back2school\".\"isparent\" (\"student\", \"parent\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &studentR{
			Parents: related,
		}
	} else {
		o.R.Parents = append(o.R.Parents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &parentR{
				Students: StudentSlice{o},
			}
		} else {
			rel.R.Students = append(rel.R.Students, o)
		}
	}
	return nil
}

// SetParentsG removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Students's Parents accordingly.
// Replaces o.R.Parents with related.
// Sets related.R.Students's Parents accordingly.
// Uses the global database handle.
func (o *Student) SetParentsG(insert bool, related ...*Parent) error {
	return o.SetParents(boil.GetDB(), insert, related...)
}

// SetParentsP removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Students's Parents accordingly.
// Replaces o.R.Parents with related.
// Sets related.R.Students's Parents accordingly.
// Panics on error.
func (o *Student) SetParentsP(exec boil.Executor, insert bool, related ...*Parent) {
	if err := o.SetParents(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentsGP removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Students's Parents accordingly.
// Replaces o.R.Parents with related.
// Sets related.R.Students's Parents accordingly.
// Uses the global database handle and panics on error.
func (o *Student) SetParentsGP(insert bool, related ...*Parent) {
	if err := o.SetParents(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParents removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Students's Parents accordingly.
// Replaces o.R.Parents with related.
// Sets related.R.Students's Parents accordingly.
func (o *Student) SetParents(exec boil.Executor, insert bool, related ...*Parent) error {
	query := "delete from \"back2school\".\"isparent\" where \"student\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeParentsFromStudentsSlice(o, related)
	if o.R != nil {
		o.R.Parents = nil
	}
	return o.AddParents(exec, insert, related...)
}

// RemoveParentsG relationships from objects passed in.
// Removes related items from R.Parents (uses pointer comparison, removal does not keep order)
// Sets related.R.Students.
// Uses the global database handle.
func (o *Student) RemoveParentsG(related ...*Parent) error {
	return o.RemoveParents(boil.GetDB(), related...)
}

// RemoveParentsP relationships from objects passed in.
// Removes related items from R.Parents (uses pointer comparison, removal does not keep order)
// Sets related.R.Students.
// Panics on error.
func (o *Student) RemoveParentsP(exec boil.Executor, related ...*Parent) {
	if err := o.RemoveParents(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentsGP relationships from objects passed in.
// Removes related items from R.Parents (uses pointer comparison, removal does not keep order)
// Sets related.R.Students.
// Uses the global database handle and panics on error.
func (o *Student) RemoveParentsGP(related ...*Parent) {
	if err := o.RemoveParents(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParents relationships from objects passed in.
// Removes related items from R.Parents (uses pointer comparison, removal does not keep order)
// Sets related.R.Students.
func (o *Student) RemoveParents(exec boil.Executor, related ...*Parent) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"back2school\".\"isparent\" where \"student\" = $1 and \"parent\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeParentsFromStudentsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Parents {
			if rel != ri {
				continue
			}

			ln := len(o.R.Parents)
			if ln > 1 && i < ln-1 {
				o.R.Parents[i] = o.R.Parents[ln-1]
			}
			o.R.Parents = o.R.Parents[:ln-1]
			break
		}
	}

	return nil
}

func removeParentsFromStudentsSlice(o *Student, related []*Parent) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Students {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Students)
			if ln > 1 && i < ln-1 {
				rel.R.Students[i] = rel.R.Students[ln-1]
			}
			rel.R.Students = rel.R.Students[:ln-1]
			break
		}
	}
}

// AddPaymentsG adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Student appropriately.
// Uses the global database handle.
func (o *Student) AddPaymentsG(insert bool, related ...*Payment) error {
	return o.AddPayments(boil.GetDB(), insert, related...)
}

// AddPaymentsP adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Student appropriately.
// Panics on error.
func (o *Student) AddPaymentsP(exec boil.Executor, insert bool, related ...*Payment) {
	if err := o.AddPayments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPaymentsGP adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Student appropriately.
// Uses the global database handle and panics on error.
func (o *Student) AddPaymentsGP(insert bool, related ...*Payment) {
	if err := o.AddPayments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPayments adds the given related objects to the existing relationships
// of the student, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Student appropriately.
func (o *Student) AddPayments(exec boil.Executor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Student.Int = o.ID
			rel.Student.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"back2school\".\"payments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"student"}),
				strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Student.Int = o.ID
			rel.Student.Valid = true
		}
	}

	if o.R == nil {
		o.R = &studentR{
			Payments: related,
		}
	} else {
		o.R.Payments = append(o.R.Payments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				Student: o,
			}
		} else {
			rel.R.Student = o
		}
	}
	return nil
}

// SetPaymentsG removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Student's Payments accordingly.
// Replaces o.R.Payments with related.
// Sets related.R.Student's Payments accordingly.
// Uses the global database handle.
func (o *Student) SetPaymentsG(insert bool, related ...*Payment) error {
	return o.SetPayments(boil.GetDB(), insert, related...)
}

// SetPaymentsP removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Student's Payments accordingly.
// Replaces o.R.Payments with related.
// Sets related.R.Student's Payments accordingly.
// Panics on error.
func (o *Student) SetPaymentsP(exec boil.Executor, insert bool, related ...*Payment) {
	if err := o.SetPayments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPaymentsGP removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Student's Payments accordingly.
// Replaces o.R.Payments with related.
// Sets related.R.Student's Payments accordingly.
// Uses the global database handle and panics on error.
func (o *Student) SetPaymentsGP(insert bool, related ...*Payment) {
	if err := o.SetPayments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPayments removes all previously related items of the
// student replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Student's Payments accordingly.
// Replaces o.R.Payments with related.
// Sets related.R.Student's Payments accordingly.
func (o *Student) SetPayments(exec boil.Executor, insert bool, related ...*Payment) error {
	query := "update \"back2school\".\"payments\" set \"student\" = null where \"student\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Payments {
			rel.Student.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Student = nil
		}

		o.R.Payments = nil
	}
	return o.AddPayments(exec, insert, related...)
}

// RemovePaymentsG relationships from objects passed in.
// Removes related items from R.Payments (uses pointer comparison, removal does not keep order)
// Sets related.R.Student.
// Uses the global database handle.
func (o *Student) RemovePaymentsG(related ...*Payment) error {
	return o.RemovePayments(boil.GetDB(), related...)
}

// RemovePaymentsP relationships from objects passed in.
// Removes related items from R.Payments (uses pointer comparison, removal does not keep order)
// Sets related.R.Student.
// Panics on error.
func (o *Student) RemovePaymentsP(exec boil.Executor, related ...*Payment) {
	if err := o.RemovePayments(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePaymentsGP relationships from objects passed in.
// Removes related items from R.Payments (uses pointer comparison, removal does not keep order)
// Sets related.R.Student.
// Uses the global database handle and panics on error.
func (o *Student) RemovePaymentsGP(related ...*Payment) {
	if err := o.RemovePayments(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePayments relationships from objects passed in.
// Removes related items from R.Payments (uses pointer comparison, removal does not keep order)
// Sets related.R.Student.
func (o *Student) RemovePayments(exec boil.Executor, related ...*Payment) error {
	var err error
	for _, rel := range related {
		rel.Student.Valid = false
		if rel.R != nil {
			rel.R.Student = nil
		}
		if err = rel.Update(exec, "student"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Payments {
			if rel != ri {
				continue
			}

			ln := len(o.R.Payments)
			if ln > 1 && i < ln-1 {
				o.R.Payments[i] = o.R.Payments[ln-1]
			}
			o.R.Payments = o.R.Payments[:ln-1]
			break
		}
	}

	return nil
}

// StudentsG retrieves all records.
func StudentsG(mods ...qm.QueryMod) studentQuery {
	return Students(boil.GetDB(), mods...)
}

// Students retrieves all the records using an executor.
func Students(exec boil.Executor, mods ...qm.QueryMod) studentQuery {
	mods = append(mods, qm.From("\"back2school\".\"students\""))
	return studentQuery{NewQuery(exec, mods...)}
}

// FindStudentG retrieves a single record by ID.
func FindStudentG(id int, selectCols ...string) (*Student, error) {
	return FindStudent(boil.GetDB(), id, selectCols...)
}

// FindStudentGP retrieves a single record by ID, and panics on error.
func FindStudentGP(id int, selectCols ...string) *Student {
	retobj, err := FindStudent(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindStudent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStudent(exec boil.Executor, id int, selectCols ...string) (*Student, error) {
	studentObj := &Student{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"back2school\".\"students\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(studentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from students")
	}

	return studentObj, nil
}

// FindStudentP retrieves a single record by ID with an executor, and panics on error.
func FindStudentP(exec boil.Executor, id int, selectCols ...string) *Student {
	retobj, err := FindStudent(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Student) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Student) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Student) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Student) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no students provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studentColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	studentInsertCacheMut.RLock()
	cache, cached := studentInsertCache[key]
	studentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			studentColumns,
			studentColumnsWithDefault,
			studentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(studentType, studentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(studentType, studentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"back2school\".\"students\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"back2school\".\"students\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into students")
	}

	if !cached {
		studentInsertCacheMut.Lock()
		studentInsertCache[key] = cache
		studentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Student record. See Update for
// whitelist behavior description.
func (o *Student) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Student record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Student) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Student, and panics on error.
// See Update for whitelist behavior description.
func (o *Student) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Student.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Student) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	studentUpdateCacheMut.RLock()
	cache, cached := studentUpdateCache[key]
	studentUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			studentColumns,
			studentPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update students, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"back2school\".\"students\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, studentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(studentType, studentMapping, append(wl, studentPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update students row")
	}

	if !cached {
		studentUpdateCacheMut.Lock()
		studentUpdateCache[key] = cache
		studentUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q studentQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q studentQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for students")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o StudentSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o StudentSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o StudentSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StudentSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"back2school\".\"students\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, studentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in student slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Student) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Student) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Student) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Student) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no students provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	studentUpsertCacheMut.RLock()
	cache, cached := studentUpsertCache[key]
	studentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			studentColumns,
			studentColumnsWithDefault,
			studentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			studentColumns,
			studentPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert students, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(studentPrimaryKeyColumns))
			copy(conflict, studentPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"back2school\".\"students\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(studentType, studentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(studentType, studentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert students")
	}

	if !cached {
		studentUpsertCacheMut.Lock()
		studentUpsertCache[key] = cache
		studentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Student record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Student) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Student record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Student) DeleteG() error {
	if o == nil {
		return errors.New("models: no Student provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Student record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Student) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Student record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Student) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Student provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), studentPrimaryKeyMapping)
	sql := "DELETE FROM \"back2school\".\"students\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from students")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q studentQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q studentQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no studentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from students")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o StudentSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o StudentSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Student slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o StudentSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StudentSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Student slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(studentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"back2school\".\"students\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from student slice")
	}

	if len(studentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Student) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Student) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Student) ReloadG() error {
	if o == nil {
		return errors.New("models: no Student provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Student) Reload(exec boil.Executor) error {
	ret, err := FindStudent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StudentSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *StudentSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StudentSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty StudentSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StudentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	students := StudentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"back2school\".\"students\".* FROM \"back2school\".\"students\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studentPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&students)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StudentSlice")
	}

	*o = students

	return nil
}

// StudentExists checks if the Student row exists.
func StudentExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"back2school\".\"students\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if students exists")
	}

	return exists, nil
}

// StudentExistsG checks if the Student row exists.
func StudentExistsG(id int) (bool, error) {
	return StudentExists(boil.GetDB(), id)
}

// StudentExistsGP checks if the Student row exists. Panics on error.
func StudentExistsGP(id int) bool {
	e, err := StudentExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// StudentExistsP checks if the Student row exists. Panics on error.
func StudentExistsP(exec boil.Executor, id int) bool {
	e, err := StudentExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
