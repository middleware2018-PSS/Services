// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testParents(t *testing.T) {
	t.Parallel()

	query := Parents(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testParentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = parent.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Parents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testParentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Parents(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Parents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testParentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ParentSlice{parent}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Parents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testParentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ParentExists(tx, parent.ID)
	if err != nil {
		t.Errorf("Unable to check if Parent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ParentExistsG to return true, but got false.")
	}
}
func testParentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	parentFound, err := FindParent(tx, parent.ID)
	if err != nil {
		t.Error(err)
	}

	if parentFound == nil {
		t.Error("want a record, got nil")
	}
}
func testParentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Parents(tx).Bind(parent); err != nil {
		t.Error(err)
	}
}

func testParentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Parents(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testParentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parentOne := &Parent{}
	parentTwo := &Parent{}
	if err = randomize.Struct(seed, parentOne, parentDBTypes, false, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}
	if err = randomize.Struct(seed, parentTwo, parentDBTypes, false, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = parentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Parents(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testParentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	parentOne := &Parent{}
	parentTwo := &Parent{}
	if err = randomize.Struct(seed, parentOne, parentDBTypes, false, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}
	if err = randomize.Struct(seed, parentTwo, parentDBTypes, false, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = parentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func parentBeforeInsertHook(e boil.Executor, o *Parent) error {
	*o = Parent{}
	return nil
}

func parentAfterInsertHook(e boil.Executor, o *Parent) error {
	*o = Parent{}
	return nil
}

func parentAfterSelectHook(e boil.Executor, o *Parent) error {
	*o = Parent{}
	return nil
}

func parentBeforeUpdateHook(e boil.Executor, o *Parent) error {
	*o = Parent{}
	return nil
}

func parentAfterUpdateHook(e boil.Executor, o *Parent) error {
	*o = Parent{}
	return nil
}

func parentBeforeDeleteHook(e boil.Executor, o *Parent) error {
	*o = Parent{}
	return nil
}

func parentAfterDeleteHook(e boil.Executor, o *Parent) error {
	*o = Parent{}
	return nil
}

func parentBeforeUpsertHook(e boil.Executor, o *Parent) error {
	*o = Parent{}
	return nil
}

func parentAfterUpsertHook(e boil.Executor, o *Parent) error {
	*o = Parent{}
	return nil
}

func testParentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Parent{}
	o := &Parent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, parentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Parent object: %s", err)
	}

	AddParentHook(boil.BeforeInsertHook, parentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	parentBeforeInsertHooks = []ParentHook{}

	AddParentHook(boil.AfterInsertHook, parentAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	parentAfterInsertHooks = []ParentHook{}

	AddParentHook(boil.AfterSelectHook, parentAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	parentAfterSelectHooks = []ParentHook{}

	AddParentHook(boil.BeforeUpdateHook, parentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	parentBeforeUpdateHooks = []ParentHook{}

	AddParentHook(boil.AfterUpdateHook, parentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	parentAfterUpdateHooks = []ParentHook{}

	AddParentHook(boil.BeforeDeleteHook, parentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	parentBeforeDeleteHooks = []ParentHook{}

	AddParentHook(boil.AfterDeleteHook, parentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	parentAfterDeleteHooks = []ParentHook{}

	AddParentHook(boil.BeforeUpsertHook, parentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	parentBeforeUpsertHooks = []ParentHook{}

	AddParentHook(boil.AfterUpsertHook, parentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	parentAfterUpsertHooks = []ParentHook{}
}
func testParentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testParentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx, parentColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Parents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testParentToManyStudents(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Parent
	var b, c Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, studentDBTypes, false, studentColumnsWithDefault...)
	randomize.Struct(seed, &c, studentDBTypes, false, studentColumnsWithDefault...)

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"back2school\".\"isparent\" (\"parent\", \"student\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"back2school\".\"isparent\" (\"parent\", \"student\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	student, err := a.Students(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range student {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ParentSlice{&a}
	if err = a.L.LoadStudents(tx, false, (*[]*Parent)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Students); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Students = nil
	if err = a.L.LoadStudents(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Students); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", student)
	}
}

func testParentToManyAddOpStudents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Parent
	var b, c, d, e Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, parentDBTypes, false, strmangle.SetComplement(parentPrimaryKeyColumns, parentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Student{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Student{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStudents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Parents[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Parents[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Students[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Students[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Students(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testParentToManySetOpStudents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Parent
	var b, c, d, e Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, parentDBTypes, false, strmangle.SetComplement(parentPrimaryKeyColumns, parentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Student{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetStudents(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Students(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetStudents(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Students(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Parents) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Parents) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Parents[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Parents[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Students[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Students[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testParentToManyRemoveOpStudents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Parent
	var b, c, d, e Student

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, parentDBTypes, false, strmangle.SetComplement(parentPrimaryKeyColumns, parentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Student{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, studentDBTypes, false, strmangle.SetComplement(studentPrimaryKeyColumns, studentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddStudents(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Students(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveStudents(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Students(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Parents) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Parents) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Parents[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Parents[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Students) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Students[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Students[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testParentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = parent.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testParentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ParentSlice{parent}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testParentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Parents(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	parentDBTypes = map[string]string{`ID`: `integer`, `Info`: `text`, `Mail`: `text`, `Name`: `text`, `Password`: `text`, `Surname`: `text`}
	_             = bytes.MinRead
)

func testParentsUpdate(t *testing.T) {
	t.Parallel()

	if len(parentColumns) == len(parentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	if err = parent.Update(tx); err != nil {
		t.Error(err)
	}
}

func testParentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(parentColumns) == len(parentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	parent := &Parent{}
	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, parent, parentDBTypes, true, parentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(parentColumns, parentPrimaryKeyColumns) {
		fields = parentColumns
	} else {
		fields = strmangle.SetComplement(
			parentColumns,
			parentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(parent))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ParentSlice{parent}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testParentsUpsert(t *testing.T) {
	t.Parallel()

	if len(parentColumns) == len(parentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	parent := Parent{}
	if err = randomize.Struct(seed, &parent, parentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = parent.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Parent: %s", err)
	}

	count, err := Parents(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &parent, parentDBTypes, false, parentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Parent struct: %s", err)
	}

	if err = parent.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Parent: %s", err)
	}

	count, err = Parents(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
