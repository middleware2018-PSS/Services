// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Grade is an object representing the database table.
type Grade struct {
	Student null.Int    `boil:"student" json:"student,omitempty" toml:"student" yaml:"student,omitempty"`
	Grade   null.Int    `boil:"grade" json:"grade,omitempty" toml:"grade" yaml:"grade,omitempty"`
	Subject null.String `boil:"subject" json:"subject,omitempty" toml:"subject" yaml:"subject,omitempty"`
	Date    time.Time   `boil:"date" json:"date" toml:"date" yaml:"date"`
	Teacher int         `boil:"teacher" json:"teacher" toml:"teacher" yaml:"teacher"`
	ID      int         `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *gradeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gradeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GradeColumns = struct {
	Student string
	Grade   string
	Subject string
	Date    string
	Teacher string
	ID      string
}{
	Student: "student",
	Grade:   "grade",
	Subject: "subject",
	Date:    "date",
	Teacher: "teacher",
	ID:      "id",
}

// gradeR is where relationships are stored.
type gradeR struct {
	Teacher *Teacher
	Student *Student
}

// gradeL is where Load methods for each relationship are stored.
type gradeL struct{}

var (
	gradeColumns               = []string{"student", "grade", "subject", "date", "teacher", "id"}
	gradeColumnsWithoutDefault = []string{"student", "grade", "date", "teacher"}
	gradeColumnsWithDefault    = []string{"subject", "id"}
	gradePrimaryKeyColumns     = []string{"id"}
)

type (
	// GradeSlice is an alias for a slice of pointers to Grade.
	// This should generally be used opposed to []Grade.
	GradeSlice []*Grade
	// GradeHook is the signature for custom Grade hook methods
	GradeHook func(boil.Executor, *Grade) error

	gradeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gradeType                 = reflect.TypeOf(&Grade{})
	gradeMapping              = queries.MakeStructMapping(gradeType)
	gradePrimaryKeyMapping, _ = queries.BindMapping(gradeType, gradeMapping, gradePrimaryKeyColumns)
	gradeInsertCacheMut       sync.RWMutex
	gradeInsertCache          = make(map[string]insertCache)
	gradeUpdateCacheMut       sync.RWMutex
	gradeUpdateCache          = make(map[string]updateCache)
	gradeUpsertCacheMut       sync.RWMutex
	gradeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var gradeBeforeInsertHooks []GradeHook
var gradeBeforeUpdateHooks []GradeHook
var gradeBeforeDeleteHooks []GradeHook
var gradeBeforeUpsertHooks []GradeHook

var gradeAfterInsertHooks []GradeHook
var gradeAfterSelectHooks []GradeHook
var gradeAfterUpdateHooks []GradeHook
var gradeAfterDeleteHooks []GradeHook
var gradeAfterUpsertHooks []GradeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Grade) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gradeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Grade) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range gradeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Grade) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range gradeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Grade) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gradeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Grade) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gradeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Grade) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range gradeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Grade) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range gradeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Grade) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range gradeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Grade) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gradeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGradeHook registers your hook function for all future operations.
func AddGradeHook(hookPoint boil.HookPoint, gradeHook GradeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		gradeBeforeInsertHooks = append(gradeBeforeInsertHooks, gradeHook)
	case boil.BeforeUpdateHook:
		gradeBeforeUpdateHooks = append(gradeBeforeUpdateHooks, gradeHook)
	case boil.BeforeDeleteHook:
		gradeBeforeDeleteHooks = append(gradeBeforeDeleteHooks, gradeHook)
	case boil.BeforeUpsertHook:
		gradeBeforeUpsertHooks = append(gradeBeforeUpsertHooks, gradeHook)
	case boil.AfterInsertHook:
		gradeAfterInsertHooks = append(gradeAfterInsertHooks, gradeHook)
	case boil.AfterSelectHook:
		gradeAfterSelectHooks = append(gradeAfterSelectHooks, gradeHook)
	case boil.AfterUpdateHook:
		gradeAfterUpdateHooks = append(gradeAfterUpdateHooks, gradeHook)
	case boil.AfterDeleteHook:
		gradeAfterDeleteHooks = append(gradeAfterDeleteHooks, gradeHook)
	case boil.AfterUpsertHook:
		gradeAfterUpsertHooks = append(gradeAfterUpsertHooks, gradeHook)
	}
}

// OneP returns a single grade record from the query, and panics on error.
func (q gradeQuery) OneP() *Grade {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single grade record from the query.
func (q gradeQuery) One() (*Grade, error) {
	o := &Grade{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for grades")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Grade records from the query, and panics on error.
func (q gradeQuery) AllP() GradeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Grade records from the query.
func (q gradeQuery) All() (GradeSlice, error) {
	var o []*Grade

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Grade slice")
	}

	if len(gradeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Grade records in the query, and panics on error.
func (q gradeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Grade records in the query.
func (q gradeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count grades rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q gradeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q gradeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if grades exists")
	}

	return count > 0, nil
}

// TeacherG pointed to by the foreign key.
func (o *Grade) TeacherG(mods ...qm.QueryMod) teacherQuery {
	return o.Teacher(boil.GetDB(), mods...)
}

// Teacher pointed to by the foreign key.
func (o *Grade) Teacher(exec boil.Executor, mods ...qm.QueryMod) teacherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Teacher),
	}

	queryMods = append(queryMods, mods...)

	query := Teachers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"teachers\"")

	return query
}

// StudentG pointed to by the foreign key.
func (o *Grade) StudentG(mods ...qm.QueryMod) studentQuery {
	return o.Student(boil.GetDB(), mods...)
}

// Student pointed to by the foreign key.
func (o *Grade) Student(exec boil.Executor, mods ...qm.QueryMod) studentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Student),
	}

	queryMods = append(queryMods, mods...)

	query := Students(exec, queryMods...)
	queries.SetFrom(query.Query, "\"back2school\".\"students\"")

	return query
} // LoadTeacher allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (gradeL) LoadTeacher(e boil.Executor, singular bool, maybeGrade interface{}) error {
	var slice []*Grade
	var object *Grade

	count := 1
	if singular {
		object = maybeGrade.(*Grade)
	} else {
		slice = *maybeGrade.(*[]*Grade)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &gradeR{}
		}
		args[0] = object.Teacher
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &gradeR{}
			}
			args[i] = obj.Teacher
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"teachers\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Teacher")
	}
	defer results.Close()

	var resultSlice []*Teacher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Teacher")
	}

	if len(gradeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Teacher = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Teacher == foreign.ID {
				local.R.Teacher = foreign
				break
			}
		}
	}

	return nil
}

// LoadStudent allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (gradeL) LoadStudent(e boil.Executor, singular bool, maybeGrade interface{}) error {
	var slice []*Grade
	var object *Grade

	count := 1
	if singular {
		object = maybeGrade.(*Grade)
	} else {
		slice = *maybeGrade.(*[]*Grade)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &gradeR{}
		}
		args[0] = object.Student
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &gradeR{}
			}
			args[i] = obj.Student
		}
	}

	query := fmt.Sprintf(
		"select * from \"back2school\".\"students\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Student")
	}
	defer results.Close()

	var resultSlice []*Student
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Student")
	}

	if len(gradeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Student = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Student.Int == foreign.ID {
				local.R.Student = foreign
				break
			}
		}
	}

	return nil
}

// SetTeacherG of the grade to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Grades.
// Uses the global database handle.
func (o *Grade) SetTeacherG(insert bool, related *Teacher) error {
	return o.SetTeacher(boil.GetDB(), insert, related)
}

// SetTeacherP of the grade to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Grades.
// Panics on error.
func (o *Grade) SetTeacherP(exec boil.Executor, insert bool, related *Teacher) {
	if err := o.SetTeacher(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTeacherGP of the grade to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Grades.
// Uses the global database handle and panics on error.
func (o *Grade) SetTeacherGP(insert bool, related *Teacher) {
	if err := o.SetTeacher(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTeacher of the grade to the related item.
// Sets o.R.Teacher to related.
// Adds o to related.R.Grades.
func (o *Grade) SetTeacher(exec boil.Executor, insert bool, related *Teacher) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"back2school\".\"grades\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"teacher"}),
		strmangle.WhereClause("\"", "\"", 2, gradePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Teacher = related.ID

	if o.R == nil {
		o.R = &gradeR{
			Teacher: related,
		}
	} else {
		o.R.Teacher = related
	}

	if related.R == nil {
		related.R = &teacherR{
			Grades: GradeSlice{o},
		}
	} else {
		related.R.Grades = append(related.R.Grades, o)
	}

	return nil
}

// SetStudentG of the grade to the related item.
// Sets o.R.Student to related.
// Adds o to related.R.Grades.
// Uses the global database handle.
func (o *Grade) SetStudentG(insert bool, related *Student) error {
	return o.SetStudent(boil.GetDB(), insert, related)
}

// SetStudentP of the grade to the related item.
// Sets o.R.Student to related.
// Adds o to related.R.Grades.
// Panics on error.
func (o *Grade) SetStudentP(exec boil.Executor, insert bool, related *Student) {
	if err := o.SetStudent(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStudentGP of the grade to the related item.
// Sets o.R.Student to related.
// Adds o to related.R.Grades.
// Uses the global database handle and panics on error.
func (o *Grade) SetStudentGP(insert bool, related *Student) {
	if err := o.SetStudent(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStudent of the grade to the related item.
// Sets o.R.Student to related.
// Adds o to related.R.Grades.
func (o *Grade) SetStudent(exec boil.Executor, insert bool, related *Student) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"back2school\".\"grades\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"student"}),
		strmangle.WhereClause("\"", "\"", 2, gradePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Student.Int = related.ID
	o.Student.Valid = true

	if o.R == nil {
		o.R = &gradeR{
			Student: related,
		}
	} else {
		o.R.Student = related
	}

	if related.R == nil {
		related.R = &studentR{
			Grades: GradeSlice{o},
		}
	} else {
		related.R.Grades = append(related.R.Grades, o)
	}

	return nil
}

// RemoveStudentG relationship.
// Sets o.R.Student to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Grade) RemoveStudentG(related *Student) error {
	return o.RemoveStudent(boil.GetDB(), related)
}

// RemoveStudentP relationship.
// Sets o.R.Student to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Grade) RemoveStudentP(exec boil.Executor, related *Student) {
	if err := o.RemoveStudent(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveStudentGP relationship.
// Sets o.R.Student to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Grade) RemoveStudentGP(related *Student) {
	if err := o.RemoveStudent(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveStudent relationship.
// Sets o.R.Student to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Grade) RemoveStudent(exec boil.Executor, related *Student) error {
	var err error

	o.Student.Valid = false
	if err = o.Update(exec, "student"); err != nil {
		o.Student.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Student = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Grades {
		if o.Student.Int != ri.Student.Int {
			continue
		}

		ln := len(related.R.Grades)
		if ln > 1 && i < ln-1 {
			related.R.Grades[i] = related.R.Grades[ln-1]
		}
		related.R.Grades = related.R.Grades[:ln-1]
		break
	}
	return nil
}

// GradesG retrieves all records.
func GradesG(mods ...qm.QueryMod) gradeQuery {
	return Grades(boil.GetDB(), mods...)
}

// Grades retrieves all the records using an executor.
func Grades(exec boil.Executor, mods ...qm.QueryMod) gradeQuery {
	mods = append(mods, qm.From("\"back2school\".\"grades\""))
	return gradeQuery{NewQuery(exec, mods...)}
}

// FindGradeG retrieves a single record by ID.
func FindGradeG(id int, selectCols ...string) (*Grade, error) {
	return FindGrade(boil.GetDB(), id, selectCols...)
}

// FindGradeGP retrieves a single record by ID, and panics on error.
func FindGradeGP(id int, selectCols ...string) *Grade {
	retobj, err := FindGrade(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindGrade retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGrade(exec boil.Executor, id int, selectCols ...string) (*Grade, error) {
	gradeObj := &Grade{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"back2school\".\"grades\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(gradeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from grades")
	}

	return gradeObj, nil
}

// FindGradeP retrieves a single record by ID with an executor, and panics on error.
func FindGradeP(exec boil.Executor, id int, selectCols ...string) *Grade {
	retobj, err := FindGrade(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Grade) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Grade) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Grade) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Grade) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no grades provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gradeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	gradeInsertCacheMut.RLock()
	cache, cached := gradeInsertCache[key]
	gradeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			gradeColumns,
			gradeColumnsWithDefault,
			gradeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(gradeType, gradeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gradeType, gradeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"back2school\".\"grades\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"back2school\".\"grades\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into grades")
	}

	if !cached {
		gradeInsertCacheMut.Lock()
		gradeInsertCache[key] = cache
		gradeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Grade record. See Update for
// whitelist behavior description.
func (o *Grade) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Grade record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Grade) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Grade, and panics on error.
// See Update for whitelist behavior description.
func (o *Grade) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Grade.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Grade) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	gradeUpdateCacheMut.RLock()
	cache, cached := gradeUpdateCache[key]
	gradeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			gradeColumns,
			gradePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update grades, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"back2school\".\"grades\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gradePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gradeType, gradeMapping, append(wl, gradePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update grades row")
	}

	if !cached {
		gradeUpdateCacheMut.Lock()
		gradeUpdateCache[key] = cache
		gradeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q gradeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q gradeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for grades")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GradeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o GradeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o GradeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GradeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"back2school\".\"grades\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gradePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in grade slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Grade) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Grade) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Grade) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Grade) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no grades provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gradeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gradeUpsertCacheMut.RLock()
	cache, cached := gradeUpsertCache[key]
	gradeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			gradeColumns,
			gradeColumnsWithDefault,
			gradeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			gradeColumns,
			gradePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert grades, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gradePrimaryKeyColumns))
			copy(conflict, gradePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"back2school\".\"grades\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gradeType, gradeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gradeType, gradeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert grades")
	}

	if !cached {
		gradeUpsertCacheMut.Lock()
		gradeUpsertCache[key] = cache
		gradeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Grade record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Grade) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Grade record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Grade) DeleteG() error {
	if o == nil {
		return errors.New("models: no Grade provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Grade record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Grade) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Grade record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Grade) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Grade provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gradePrimaryKeyMapping)
	sql := "DELETE FROM \"back2school\".\"grades\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from grades")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q gradeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q gradeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no gradeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from grades")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o GradeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o GradeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Grade slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o GradeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GradeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Grade slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(gradeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"back2school\".\"grades\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gradePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from grade slice")
	}

	if len(gradeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Grade) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Grade) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Grade) ReloadG() error {
	if o == nil {
		return errors.New("models: no Grade provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Grade) Reload(exec boil.Executor) error {
	ret, err := FindGrade(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GradeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GradeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GradeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty GradeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GradeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	grades := GradeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"back2school\".\"grades\".* FROM \"back2school\".\"grades\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gradePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&grades)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GradeSlice")
	}

	*o = grades

	return nil
}

// GradeExists checks if the Grade row exists.
func GradeExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"back2school\".\"grades\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if grades exists")
	}

	return exists, nil
}

// GradeExistsG checks if the Grade row exists.
func GradeExistsG(id int) (bool, error) {
	return GradeExists(boil.GetDB(), id)
}

// GradeExistsGP checks if the Grade row exists. Panics on error.
func GradeExistsGP(id int) bool {
	e, err := GradeExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// GradeExistsP checks if the Grade row exists. Panics on error.
func GradeExistsP(exec boil.Executor, id int) bool {
	e, err := GradeExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
